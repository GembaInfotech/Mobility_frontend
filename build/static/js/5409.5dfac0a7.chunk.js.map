{"version":3,"file":"static/js/5409.5dfac0a7.chunk.js","mappings":"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","sources":["services/CommonService.js","views/inventory/stockEntry/addEdit/index.js"],"sourcesContent":["import ApiService from \"./ApiService\"\r\nimport BaseService from \"./BaseService\";\r\n\r\nexport function getApi(endpoint, params) {\r\n  return BaseService.get(endpoint, { params }).then((res) => res?.data);\r\n}\r\n\r\nexport function postApi(endpoint, payload) {    \r\n  return BaseService.post(endpoint, payload).then((res) => res?.data);\r\n}\r\n\r\nexport async function apiGetNotificationCount () {\r\n    return ApiService.fetchData({\r\n        url: '/notification/count',\r\n        method: 'get'\r\n    })\r\n}\r\n\r\nexport async function apiGetNotificationList () {\r\n    return ApiService.fetchData({\r\n        url: '/notification/list',\r\n        method: 'get'\r\n    })\r\n}\r\n\r\nexport async function apiGetSearchResult (data) {\r\n    return ApiService.fetchData({\r\n        url: '/search/query',\r\n        method: 'post',\r\n        data\r\n    })\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { useParams, useNavigate, useLocation } from \"react-router-dom\";\r\nimport { Button, Card, FormContainer, FormItem, Input, Select, toast, Notification } from \"components/ui\";\r\nimport { AiOutlineSave, AiOutlineCloseCircle } from \"react-icons/ai\";\r\nimport { getApi, postApi } from \"services/CommonService\";\r\nimport { APIS, LIST_DATA_API_TYPE } from \"constants/api.constant\";\r\nimport { UPDATE_TOAST, ADDED_TOAST } from \"constants/app.constant\";\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  code: Yup.string().required(\"L Code is required\"),\r\n  stockType: Yup.object().required(\"Stock Entry Type is required\"),\r\n  quantity: Yup.number()\r\n    .required(\"Quantity is required\")\r\n    .positive(\"Quantity must be positive\")\r\n    .integer(\"Quantity must be an integer\"),\r\n  location: Yup.string().required(\"Location is required\"),\r\n});\r\n\r\nconst initialValues = {\r\n  code: \"\",\r\n  description: \"\",\r\n  stockType: { label: \"Material Receipt\", value: 1 },\r\n  quantity: \"\",\r\n  location: \"\",\r\n  uom: \"\",\r\n  uomId: \"\",\r\n  transferLocation: \"\",\r\n  transferQuantity: \"\"\r\n};\r\n\r\nconst AddEditStock = ({ onClose, refreshPage }) => {\r\n  const { id } = useParams();\r\n  const [loading, setLoading] = useState(false);\r\n  const [materialOptions, setMaterialOptions] = useState([]); // To store materials\r\n  const [warehouseOptions, setWarehouseOptions] = useState([]); // To store locations\r\n  const [editData, setEditData] = useState(initialValues);\r\n  const [loadingMaterialOptions, setLoadingMaterialOptions] = useState(true); // To handle loading state for materials\r\n\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  // Fetch data for materials and locations\r\n  useEffect(() => {\r\n    // Fetch LCode materials (Stock types)\r\n    getApi(APIS.LIST_DATA, { type: LIST_DATA_API_TYPE.CODES })\r\n      .then((res) => {\r\n        if (res && res.data && Array.isArray(res.data.data)) {\r\n          const filteredData = res.data.data.filter((item) => item.type === 1);\r\n          const materials = filteredData.map((item) => ({\r\n            label: item.code,\r\n            value: item._id,\r\n            description: item.description,\r\n            uom: item?.uomId?.name,\r\n            uomId: item?.uomId?._id,\r\n          }));\r\n          setMaterialOptions(materials);\r\n          setLoadingMaterialOptions(false); // Set loading to false once data is fetched\r\n        } else {\r\n          toast.push(<Notification type=\"error\">No Materials found!</Notification>);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching materials:\", error);\r\n        toast.push(<Notification type=\"error\">Failed to load Materials</Notification>);\r\n      });\r\n\r\n    // Fetch locations (Warehouses)\r\n    getApi(APIS.LIST_DATA, { type: LIST_DATA_API_TYPE.LOCATIONS })\r\n      .then((res) => {\r\n        if (res && res.data && Array.isArray(res.data.data)) {\r\n          const locations = res.data.data.map((location) => ({\r\n            label: location.name,\r\n            value: location._id,\r\n          }));\r\n          setWarehouseOptions(locations);\r\n        } else {\r\n          toast.push(<Notification type=\"error\">No Warehouses found!</Notification>);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching warehouses:\", error);\r\n        toast.push(<Notification type=\"error\">Failed to load Warehouses</Notification>);\r\n      });\r\n\r\n    if (id) {\r\n      const data = location.state?.editData;\r\n\r\n      setEditData({\r\n        code: data?.lcodeId?._id || \"\",\r\n        description: data.lcodeId?.description || \"\",\r\n        stockType: { label: \"Material Receipt\", value: 1 },\r\n        quantity: data.quantity || \"\",\r\n        location: data.locationId?._id || \"\",\r\n        modelType: LIST_DATA_API_TYPE.STOCK_ENTRY,\r\n\r\n      });\r\n    }\r\n  }, [id, location.state?.editData]);\r\n\r\n\r\n  const onSubmit = (values, { setSubmitting }) => {\r\n    const payload = {\r\n      lcodeId: values.code,\r\n      stockType: values.stockType?.value,\r\n      quantity: values.quantity,\r\n      locationId: values.location,\r\n      uomId: values.uomId,\r\n      transferLocation: values.transferLocation, // Include transfer location\r\n      transferQuantity: values.transferQuantity, // Include transfer quantity\r\n      modelType: LIST_DATA_API_TYPE.STOCK_ENTRY,\r\n    };\r\n    if (id) {\r\n      payload.id = id;\r\n    }\r\n    postApi(APIS.ADD_EDIT_DATA, payload)\r\n      .then((res) => {\r\n        toast.push(<Notification type=\"success\">{id ? UPDATE_TOAST : ADDED_TOAST}</Notification>);\r\n        navigate(\"/app/inventory/stockEntry\");\r\n      })\r\n      .catch((err) => {\r\n        toast.push(<Notification type=\"error\">{err}</Notification>);\r\n      })\r\n      .finally(() => {\r\n        setSubmitting(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={editData}\r\n      validationSchema={validationSchema}\r\n      onSubmit={onSubmit}\r\n      enableReinitialize\r\n    >\r\n      {({ errors, touched, values, setFieldValue, isSubmitting }) => (\r\n        <Form>\r\n          <div className=\"flex mb-3 justify-between w-3/4\">\r\n            <h3>{editData.code ? \"Edit Stock\" : \"Add Stock\"}</h3>\r\n            <div className=\"flex\">\r\n              <Button size=\"sm\" className=\"ltr:mr-3 rtl:ml-3\" onClick={() => navigate(-1)} icon={<AiOutlineCloseCircle />} type=\"button\">\r\n                Cancel\r\n              </Button>\r\n              <Button size=\"sm\" variant=\"solid\" loading={isSubmitting || loading} icon={<AiOutlineSave />} type=\"submit\">\r\n                {editData.code ? \"Update\" : \"Save\"}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n          <Card className=\"mt-2.5 w-3/4\">\r\n            <FormContainer className=\"md:w-full lg:w-1/2\">\r\n              <FormItem label=\"Stock Entry Type\" invalid={errors.stockType && touched.stockType} errorMessage={errors.stockType}>\r\n                <Select\r\n                  name=\"stockType\"\r\n                  options={[\r\n                    { label: \"Material Receipt\", value: 1 },\r\n                    { label: \"Material Transfer\", value: 2 },\r\n                  ]}\r\n                  placeholder=\"Select Stock Type\"\r\n                  value={values.stockType}\r\n                  onChange={(selectedOption) => setFieldValue(\"stockType\", selectedOption)}\r\n                />\r\n              </FormItem>\r\n\r\n              <FormItem label=\"Location\" invalid={errors.location && touched.location} errorMessage={errors.location}>\r\n                <Select\r\n                  name=\"location\"\r\n                  options={warehouseOptions}\r\n                  placeholder=\"Select Location\"\r\n                  value={warehouseOptions.find((option) => option.value === values.location)}\r\n                  onChange={(selectedOption) => setFieldValue(\"location\", selectedOption.value)}\r\n                />\r\n              </FormItem>\r\n\r\n              <FormItem label=\"LCode\" invalid={errors.code && touched.code} errorMessage={errors.code}>\r\n                {loadingMaterialOptions ? (\r\n                  <Input size=\"sm\" value=\"Loading...\" readOnly />\r\n                ) : (\r\n                  <Select\r\n                    size=\"sm\"\r\n                    name=\"code\"\r\n                    placeholder=\"Select LCode\"\r\n                    options={materialOptions}\r\n                    value={materialOptions.find((option) => option.value === values.code) || null}\r\n                    onChange={(selectedOption) => {\r\n                      setFieldValue(\"code\", selectedOption.value);\r\n                      setFieldValue(\"description\", selectedOption.description);\r\n                      setFieldValue(\"uom\", selectedOption.uom);\r\n                      setFieldValue(\"uomId\", selectedOption.uomId);\r\n                    }}\r\n                  />\r\n                )}\r\n              </FormItem>\r\n\r\n              <FormItem label=\"Description\">\r\n                <Field as={Input} size=\"sm\" name=\"description\" value={values.description} readOnly />\r\n              </FormItem>\r\n\r\n              <FormItem label=\"Quantity\" invalid={errors.quantity && touched.quantity} errorMessage={errors.quantity}>\r\n                <Field as={Input} type=\"number\" name=\"quantity\" placeholder=\"Add Quantity\" value={values.quantity} onChange={(e) => setFieldValue(\"quantity\", e.target.value)} />\r\n              </FormItem>\r\n\r\n              {values.stockType.value === 2 && (\r\n                <>\r\n                  <FormItem\r\n                    label=\"Transfer Location\"\r\n                    invalid={errors.transferLocation && touched.transferLocation}\r\n                    errorMessage={errors.transferLocation}\r\n                  >\r\n                    <Select\r\n                      name=\"transferLocation\"\r\n                      options={warehouseOptions}\r\n                      placeholder=\"Select Transfer Location\"\r\n                      value={warehouseOptions.find((option) => option.value === values.transferLocation)}\r\n                      onChange={(selectedOption) => setFieldValue(\"transferLocation\", selectedOption.value)}\r\n                    />\r\n                  </FormItem>\r\n\r\n                  <FormItem\r\n                    label=\"Transfer Quantity\"\r\n                    invalid={errors.transferQuantity && touched.transferQuantity}\r\n                    errorMessage={errors.transferQuantity}\r\n                  >\r\n                    <Field\r\n                      as={Input}\r\n                      type=\"number\"\r\n                      name=\"transferQuantity\"\r\n                      placeholder=\"Enter Transfer Quantity\"\r\n                      value={values.transferQuantity}\r\n                      onChange={(e) => setFieldValue(\"transferQuantity\", e.target.value)}\r\n                    />\r\n                  </FormItem>\r\n                </>\r\n              )}\r\n            </FormContainer>\r\n          </Card>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default AddEditStock;\r\n"],"names":["getApi","endpoint","params","BaseService","then","res","data","postApi","payload","apiGetSearchResult","ApiService","url","method","validationSchema","Yup","shape","code","required","stockType","quantity","positive","integer","location","initialValues","description","label","value","uom","uomId","transferLocation","transferQuantity","onClose","refreshPage","id","useParams","useState","loading","materialOptions","setMaterialOptions","warehouseOptions","setWarehouseOptions","editData","setEditData","loadingMaterialOptions","setLoadingMaterialOptions","navigate","useNavigate","useLocation","useEffect","APIS","type","LIST_DATA_API_TYPE","Array","isArray","materials","filter","item","map","_id","name","toast","catch","error","console","locations","state","lcodeId","locationId","modelType","onSubmit","values","setSubmitting","UPDATE_TOAST","ADDED_TOAST","err","finally","enableReinitialize","errors","touched","setFieldValue","isSubmitting","className","size","onClick","icon","variant","invalid","errorMessage","options","placeholder","onChange","selectedOption","find","option","readOnly","as","Input","e","target"],"sourceRoot":""}