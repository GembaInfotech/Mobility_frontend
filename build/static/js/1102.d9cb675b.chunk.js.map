{"version":3,"file":"static/js/1102.d9cb675b.chunk.js","mappings":"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","sources":["components/template/Logo.js","utils/hooks/useTimeOutMessage.js","views/auth/ResetPassword/ResetPasswordForm.js","components/layout/AuthLayout/Simple.js","views/auth/ResetSimplePassword/ResetPasswordSimple.js"],"sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classNames from \"classnames\";\r\nimport { APP_NAME } from \"constants/app.constant\";\r\n\r\nexport const LOGO_SRC_PATH = \"/img/logo/\";\r\n\r\nconst Logo = (props) => {\r\n  const {\r\n    type,\r\n    mode,\r\n    gutter,\r\n    className,\r\n    imgClass,\r\n    style,\r\n    logoWidth,\r\n    imgHeight = 100,\r\n    imgWidth = 100,\r\n  } = props;\r\n\r\n  return (\r\n    <div\r\n      className={classNames(\"logo\", className, gutter)}\r\n      style={{\r\n        ...style,\r\n        ...{ width: logoWidth },\r\n      }}\r\n    >\r\n      <img\r\n        className={imgClass}\r\n        src={`${LOGO_SRC_PATH}app-logo2.png`}\r\n        alt={`${APP_NAME} logo`}\r\n        style={{ width: imgWidth, height: imgHeight}}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nLogo.defaultProps = {\r\n  mode: \"light\",\r\n  type: \"full\",\r\n  logoWidth: \"auto\",\r\n};\r\n\r\nLogo.propTypes = {\r\n  mode: PropTypes.oneOf([\"light\", \"dark\"]),\r\n  type: PropTypes.oneOf([\"full\", \"streamline\"]),\r\n  gutter: PropTypes.string,\r\n  imgClass: PropTypes.string,\r\n  logoWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n};\r\n\r\nexport default Logo;\r\n","import { useEffect, useState } from 'react'\r\n\r\nfunction useTimeOutMessage(interval = 3000) {\r\n\r\n    const [message, setMessage] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (message) {\r\n            let timeout = setTimeout(() => setMessage(''), interval)\r\n            return () => {\r\n                clearTimeout(timeout)\r\n            }\r\n\t\t}\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [message])\r\n                                              \r\n    return [message, setMessage]\r\n}\r\n\r\nexport default useTimeOutMessage","import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  FormItem,\r\n  FormContainer,\r\n  Alert,\r\n  toast,\r\n  Notification,\r\n} from \"components/ui\";\r\nimport { PasswordInput } from \"components/shared\";\r\nimport useTimeOutMessage from \"utils/hooks/useTimeOutMessage\";\r\nimport { Field, Form, Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { useParams, useSearchParams } from \"react-router-dom\";\r\nimport { postApi } from \"services/CommonService\";\r\nimport { APIS } from \"constants/api.constant\";\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  password: Yup.string()\r\n    .required(\"Please enter a password\")\r\n    .min(8, \"Password must have at least 8 characters\"),\r\n  confirmPassword: Yup.string().oneOf(\r\n    [Yup.ref(\"password\"), null],\r\n    \"Your passwords do not match\"\r\n  ),\r\n});\r\n\r\nconst initialValues = {\r\n  password: \"\",\r\n  confirmPassword: \"\",\r\n};\r\n\r\nconst ResetPasswordForm = (props) => {\r\n  const { id } = useParams();\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const userType = searchParams.get(\"userType\");\r\n  const { disableSubmit = false, className, signInUrl = \"/sign-in\" } = props;\r\n  const [resetComplete, setResetComplete] = useState(false);\r\n  const [message, setMessage] = useTimeOutMessage();\r\n\r\n  const onSubmit = (values, { setSubmitting, resetForm }) => {\r\n    setSubmitting(true);\r\n    const { password } = values;\r\n    const payload = {\r\n      id: id,\r\n      userType: +userType,\r\n      password: password,\r\n    };\r\n\r\n    postApi(APIS.UPDATE_PASSOWRD, { ...payload })\r\n      .then((res) => {\r\n        toast.push(\r\n          <Notification type=\"success\">Changed Successfully</Notification>\r\n        );\r\n        setResetComplete(true);\r\n        resetForm();\r\n      })\r\n      .finally(() => {\r\n        setSubmitting(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className={className}>\r\n      <div className=\"mb-6\">\r\n        {resetComplete ? (\r\n          <>\r\n            <h3 className=\"mb-1\">Reset done</h3>\r\n            <p>Your password has been successfully reset</p>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <h3 className=\"mb-1\">Set new password</h3>\r\n            <p>Your new password must different to previous password</p>\r\n          </>\r\n        )}\r\n      </div>\r\n      {message && (\r\n        <Alert className=\"mb-4\" type=\"danger\" showIcon>\r\n          {message}\r\n        </Alert>\r\n      )}\r\n      <Formik\r\n        initialValues={initialValues}\r\n        validationSchema={validationSchema}\r\n        onSubmit={onSubmit}\r\n      >\r\n        {({ touched, errors, isSubmitting }) => (\r\n          <Form>\r\n            <FormContainer>\r\n              <>\r\n                <FormItem\r\n                  label=\"Password\"\r\n                  invalid={errors.password && touched.password}\r\n                  errorMessage={errors.password}\r\n                >\r\n                  <Field\r\n                    autoComplete=\"off\"\r\n                    name=\"password\"\r\n                    placeholder=\"Password\"\r\n                    component={PasswordInput}\r\n                  />\r\n                </FormItem>\r\n                <FormItem\r\n                  label=\"Confirm Password\"\r\n                  invalid={errors.confirmPassword && touched.confirmPassword}\r\n                  errorMessage={errors.confirmPassword}\r\n                >\r\n                  <Field\r\n                    autoComplete=\"off\"\r\n                    name=\"confirmPassword\"\r\n                    placeholder=\"Confirm Password\"\r\n                    component={PasswordInput}\r\n                  />\r\n                </FormItem>\r\n                <Button\r\n                  block\r\n                  loading={isSubmitting}\r\n                  variant=\"solid\"\r\n                  type=\"submit\"\r\n                >\r\n                  {isSubmitting ? \"Submiting...\" : \"Submit\"}\r\n                </Button>\r\n              </>\r\n            </FormContainer>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResetPasswordForm;\r\n","import React, { cloneElement } from 'react'\r\nimport { Container } from 'components/shared'\r\nimport { Card } from 'components/ui'\r\nimport Logo from 'components/template/Logo'\r\n\r\nconst Simple = ({children, content, ...rest }) => {\r\n\treturn (\r\n\t\t<div className=\"h-full\">\r\n\t\t\t<Container className=\"flex flex-col flex-auto items-center justify-center min-w-0 h-full\">\r\n\t\t\t\t<Card className=\"min-w-[320px] md:min-w-[450px]\" bodyClass=\"md:p-10\">\r\n\t\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t\t<Logo type=\"streamline\" imgClass=\"mx-auto\" />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t\t{content}\r\n\t\t\t\t\t\t{children ? cloneElement(children, {contentClassName: 'text-center', ...rest }) : null}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Card>\r\n\t\t\t</Container>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Simple","import React from 'react'\r\nimport ResetPasswordForm from 'views/auth/ResetPassword/ResetPasswordForm'\r\nimport Simple from 'components/layout/AuthLayout/Simple'\r\n\r\nconst ResetPasswordSimple = props => {\r\n\treturn (\r\n\t\t<Simple>\r\n\t\t\t<ResetPasswordForm disableSubmit={true} signInUrl=\"/auth/sign-in-simple\" {...props}/>\r\n\t\t</Simple>\r\n\t)\r\n}\r\n\r\nexport default ResetPasswordSimple"],"names":["LOGO_SRC_PATH","Logo","props","type","mode","gutter","className","imgClass","style","logoWidth","imgHeight","imgWidth","classNames","width","src","alt","APP_NAME","height","defaultProps","interval","useState","message","setMessage","useEffect","timeout","setTimeout","clearTimeout","validationSchema","Yup","shape","password","required","min","confirmPassword","oneOf","initialValues","id","useParams","useSearchParams","searchParams","userType","get","disableSubmit","signInUrl","resetComplete","setResetComplete","useTimeOutMessage","showIcon","onSubmit","values","setSubmitting","resetForm","payload","postApi","APIS","then","res","toast","finally","touched","errors","isSubmitting","label","invalid","errorMessage","autoComplete","name","placeholder","component","PasswordInput","block","loading","variant","children","content","rest","bodyClass","cloneElement","contentClassName"],"sourceRoot":""}