{"version":3,"file":"static/js/8501.3fd3a3e9.chunk.js","mappings":"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","sources":["services/CommonService.js","views/company/addEdit/index.js"],"sourcesContent":["import ApiService from \"./ApiService\"\r\nimport BaseService from \"./BaseService\";\r\n\r\nexport function getApi(endpoint, params) {\r\n  return BaseService.get(endpoint, { params }).then((res) => res?.data);\r\n}\r\n\r\nexport function postApi(endpoint, payload) {    \r\n  return BaseService.post(endpoint, payload).then((res) => res?.data);\r\n}\r\n\r\nexport async function apiGetNotificationCount () {\r\n    return ApiService.fetchData({\r\n        url: '/notification/count',\r\n        method: 'get'\r\n    })\r\n}\r\n\r\nexport async function apiGetNotificationList () {\r\n    return ApiService.fetchData({\r\n        url: '/notification/list',\r\n        method: 'get'\r\n    })\r\n}\r\n\r\nexport async function apiGetSearchResult (data) {\r\n    return ApiService.fetchData({\r\n        url: '/search/query',\r\n        method: 'post',\r\n        data\r\n    })\r\n}","import React, { useEffect, useRef, useState } from 'react';\r\nimport { AdaptableCard } from 'components/shared';\r\nimport {\r\n  Button,\r\n  Input,\r\n  FormItem,\r\n  FormContainer,\r\n  toast,\r\n  Notification,\r\n  Card,\r\n  Spinner,\r\n} from 'components/ui';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { getApi, postApi } from 'services/CommonService';\r\nimport { APIS, LIST_DATA_API_TYPE } from 'constants/api.constant';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\n\r\nconst SignupSchema = Yup.object().shape({\r\n  name: Yup.string().required('Required'),\r\n});\r\n\r\nconst initialValues = {\r\n  name: '',\r\n};\r\n\r\nconst AddEditAdmins = () => {\r\n  const formRef = useRef();\r\n  const [loading, setLoading] = useState(false);\r\n  const [editData, setEditData] = useState(null);\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      getApi(APIS.LIST_DATA, {\r\n        type: LIST_DATA_API_TYPE.COMPANY,\r\n        id,\r\n      }).then((res) => {\r\n        const response = res?.data?.data;\r\n        if (response) {\r\n          setEditData(response);\r\n        }\r\n      });\r\n    }\r\n  }, [id]);\r\n\r\n  const onSubmit = ({ name }, {setSubmitting}) => {\r\n    console.log(\"Submitted Name:\", name);\r\n\r\n    setLoading(true);\r\n\r\n    // Using JSON instead of FormData\r\n    const payload = { name, id: id || undefined };\r\n          payload.modelType = LIST_DATA_API_TYPE.COMPANY\r\n    postApi(APIS.ADD_EDIT_DATA, payload, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    })\r\n      .then(() => {\r\n        navigate(-1);\r\n        toast.push(<Notification type=\"success\">Company saved!</Notification>);\r\n      })\r\n      .catch((error) => {\r\n        setSubmitting(false); \r\n        console.error(\"Error saving company:\", error);\r\n      })\r\n      .finally(() => setLoading(false));\r\n  };\r\n\r\n  return (\r\n    <AdaptableCard>\r\n      <Formik\r\n        innerRef={formRef}\r\n        initialValues={editData || initialValues}\r\n        validationSchema={SignupSchema}\r\n        onSubmit={onSubmit}\r\n        enableReinitialize\r\n      >\r\n        {({ errors, touched, isSubmitting }) => (\r\n          <Form className=\"p-5\">\r\n            <div className=\"flex mb-3 justify-end w-3/4\">\r\n              <Button size=\"sm\" variant=\"solid\" onClick={() => navigate(-1)} type=\"button\">\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                size=\"sm\"\r\n                variant=\"solid\"\r\n                style={{ marginLeft: '5px' }}\r\n                loading={isSubmitting}\r\n                type=\"submit\"\r\n              >\r\n                {id ? 'Update' : 'Save'}\r\n              </Button>\r\n            </div>\r\n\r\n            {loading ? (\r\n              <div className=\"flex justify-center\">\r\n                <Spinner size=\"3.25rem\" />\r\n              </div>\r\n            ) : (\r\n              <Card className=\"mt-2.5 w-3/4\">\r\n                <FormContainer>\r\n                  <FormItem\r\n                    label=\"Name\"\r\n                    invalid={errors?.name && touched?.name}\r\n                    errorMessage={errors?.name}\r\n                  >\r\n                    <Field\r\n                      type=\"text\"\r\n                      autoComplete=\"off\"\r\n                      name=\"name\"\r\n                      placeholder=\"Enter name\"\r\n                      component={Input}\r\n                    />\r\n                  </FormItem>\r\n                </FormContainer>\r\n              </Card>\r\n            )}\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </AdaptableCard>\r\n  );\r\n};\r\n\r\nexport default AddEditAdmins;\r\n"],"names":["getApi","endpoint","params","BaseService","then","res","data","postApi","payload","apiGetSearchResult","ApiService","url","method","SignupSchema","Yup","shape","name","required","initialValues","formRef","useRef","useState","loading","setLoading","editData","setEditData","id","useParams","navigate","useNavigate","useEffect","APIS","type","LIST_DATA_API_TYPE","response","innerRef","validationSchema","onSubmit","setSubmitting","console","log","undefined","modelType","headers","toast","catch","error","finally","enableReinitialize","errors","touched","isSubmitting","className","size","variant","onClick","style","marginLeft","label","invalid","errorMessage","autoComplete","placeholder","component","Input"],"sourceRoot":""}