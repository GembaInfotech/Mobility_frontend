{"version":3,"file":"static/js/485.e625ba63.chunk.js","mappings":"oQAaMA,EAAqB,WACzB,OACE,iCACE,SAAC,IAAS,KACV,SAAC,IAAa,MAIpB,EAEMC,EAAmB,WACvB,OACE,iCAEGC,EAAAA,EAAAA,IAAaC,EAAAA,GAAAA,aAAqBC,EAAAA,GAAAA,QAAgB,SAAC,IAAY,KAEhE,SAAC,IAAY,CAACC,WAAW,MAG/B,EAoBA,UAlBqB,SAACC,GACpB,OACE,gBAAKC,UAAU,4CAA2C,UACxD,iBAAKA,UAAU,yBAAwB,WACrC,SAAC,IAAO,KACR,iBAAKA,UAAU,uIAAsI,WACnJ,SAAC,IAAM,CACLA,UAAU,gDACVC,WAAW,SAACP,EAAgB,IAC5BQ,aAAa,SAACT,EAAkB,OAElC,SAAC,KAAI,UAAKM,WAKpB,C,wMC1BMI,EAAe,CACnBC,MAAOC,EAAAA,GACPC,SAAUD,EAAAA,IAGNE,EAAuB,CAC3BH,MAAOI,EAAAA,GACPF,SAAUE,EAAAA,IAGNC,EAAU,WACd,IAAMC,GAAOC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,KAAKH,IAAI,IAEnDI,QAAQC,IAAI,aAAcL,GAE1B,IAAMM,GAAaL,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMK,MAAMD,UAAU,IAC1DE,GAAoBP,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMK,MAAMC,iBAAiB,IACxEC,GAAUR,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMK,MAAME,OAAO,IACpDC,GAAOT,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMK,MAAMG,IAAI,IAC9CC,GAAYV,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMK,MAAMI,SAAS,IACxDC,GAAkBX,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMW,KAAKC,OAAOF,eAAe,IAC1EG,GAAkBd,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMK,MAAMS,OAAOD,eAAe,IAC3EE,GAAgBhB,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,KAAKH,KAAKkB,SAAS,IAC9DC,GAAWC,EAAAA,EAAAA,KAAXD,OAER,GAA4BE,EAAAA,EAAAA,UAAS,IAAG,eAAjCC,EAAM,KACb,GADwB,MACAD,EAAAA,EAAAA,UAAS,IAAE,eAA5BE,EAAI,KACX,GADoB,MACMF,EAAAA,EAAAA,UAAS,KAAG,eAA/BG,EAAK,KACZ,GADsB,MAC0BH,EAAAA,EAAAA,UAAS,KAAG,eAArDI,EAAgB,KAAEC,EAAmB,KAC5C,GAAwCL,EAAAA,EAAAA,UAAS,IAAG,eAA7CM,EAAY,KAAEC,EAAe,KAE5BC,GAAOC,EAAAA,EAAAA,MAAPD,IAERE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAkBC,aAAaC,QAAQ,sBAErC,OAAJlC,QAAI,IAAJA,GAAAA,EAAMmC,WAAuC,IAAtB,OAAJnC,QAAI,IAAJA,OAAI,EAAJA,EAAMmC,UAAUC,SACrCC,EAAAA,EAAAA,IAAOC,EAAAA,GAAAA,UAAgB,CACrBC,WAAYC,KAAKC,UAAUzC,EAAKmC,WAChCO,KAAMC,EAAAA,GAAAA,UAELC,MAAK,SAACC,GAAS,IAAD,EACPC,EAAc,OAAHD,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKE,YAAI,WAAN,EAAH,EAAWA,KAExBC,MAAMC,QAAQH,KAChBlB,EAAgBkB,GAEZd,GAAmBc,EAASI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAQpB,CAAe,IAC/EN,EAAoBM,GACXc,EAASV,OAAS,IAC3BV,EAAoBoB,EAAS,GAAGM,KAChCnB,aAAaoB,QAAQ,qBAAsBP,EAAS,GAAGM,MAG7D,IACCE,OAAM,SAACC,GAENnD,QAAQmD,MAAM,gCAAiCA,EACjD,KAGFlB,EAAAA,EAAAA,IAAOC,EAAAA,GAAAA,UAAgB,CACrBI,KAAMC,EAAAA,GAAAA,QACNnB,MAAAA,EACAF,OAAAA,EACAkC,KAAMhC,GAASD,EAAO,KACrBqB,MAAK,SAACC,GAAS,IAAD,EACTC,EAAc,OAAHD,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKE,YAAI,WAAN,EAAH,EAAWA,KAExBC,MAAMC,QAAQH,KAChBlB,EAAgBkB,GAEZd,GAAmBc,EAASI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAQpB,CAAe,IAC/EN,EAAoBM,GACXc,EAASV,OAAS,IAC3BV,EAAoBoB,EAAS,GAAGM,KAChCnB,aAAaoB,QAAQ,qBAAsBP,EAAS,GAAGM,MAG7D,GAEJ,GAAG,CAACvB,EAAIN,EAAMD,EAAY,OAAJtB,QAAI,IAAJA,OAAI,EAAJA,EAAMmC,YAE5B,IAwBMsB,GACJ,SAAC,UAAmB,CAClBhD,QAASA,EACTiD,UAAW3C,EACX4C,eAAgBC,EAAAA,EAChBC,SAAUjD,EACVK,cAAeA,EACfN,UAAWA,IAIf,OACE,8BACGQ,EAAO2C,KACN,iBACEC,MAAOhD,EAAkBlB,EAAuBJ,EAChDH,UAAW0E,IAAW,WAhCxBvD,IAAYwD,EAAAA,GACR,MAAN,OAAa3D,EAAU,YAAIE,EAAiB,qBAAaC,GAErD,YAAN,OAAmBA,IA6BsCM,GAAmB,mBAAmB,WAEzF,gBAAKzB,UAAU,kBAAiB,UAC9B,iBAAKA,UAAU,6CAA4C,WACvDyB,IACA,gBACEzB,UAAU,OACV4E,IAAG,UAAKC,EAAAA,EAAa,wBACrBC,IAAG,UAAKC,EAAAA,GAAQ,WAGnBtD,IACC,SAAC,IAAI,CACHuD,SAAS,OACT5D,KAvCVD,IAAYwD,EAAAA,GACPM,EAAAA,GAEL9D,IAAY+D,EAAAA,GACP9D,EAEFD,EAkCOiC,KAAM3B,EAAkB,aAAe,OACvC0D,OAAQ1D,EAAkB2D,EAAAA,GAA0BC,EAAAA,GACpDC,UAAW,GACXC,SAAU,MAIZ9D,IACA,oBACEzB,UAAU,iDACVwF,MAAOrD,EACPsD,SAlEa,SAACC,GAC5B,IAAMC,EAAaD,EAAME,OAAOJ,MAChCpD,EAAoBuD,GACpBhD,aAAaoB,QAAQ,qBAAsB4B,GAC3CE,OAAOC,SAASC,QAClB,EA6D+C,WAE/B,mBAAQP,MAAM,GAAE,6BACfnD,EAAa2D,KAAI,SAACnC,GAAQ,OACzB,mBAA2B2B,MAAO3B,EAASC,IAAI,SAC5CD,EAASoC,MADCpC,EAASC,IAEb,YAMlBrC,EACC0C,GAEA,gBAAKnE,UAAU,+BAA8B,UAC3C,SAAC,KAAS,CAACkG,UAAQ,EAAC7E,UAAWA,EAAU,SAAE8C,UAOzD,EAQA1D,EAAQ0F,aAAe,CACrBC,QAAQ,EACRC,UAAU,EACVrF,WAAY,IAGd,K,uGClLA,KAAesF,EAAAA,EAAAA,IAzBc,SAAH,GAAuB,IAAjBtG,EAAS,EAATA,UAEzByB,GAAkBd,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMK,MAAMS,OAAOD,eAAe,IAC3E8E,GAAWC,EAAAA,EAAAA,MAET3E,GAAWC,EAAAA,EAAAA,KAAXD,OAMR,OACC,8BACEA,EAAO2C,KACP,gBACCxE,UAAWA,EACXyG,QATe,WAClBF,GAASG,EAAAA,EAAAA,KAAoBjF,GAC9B,EAOwB,UAEpB,SAAC,KAAS,CAACzB,UAAU,WAAW2G,QAASlF,OAK9C,G","sources":["components/layout/ModernLayout.js","components/template/SideNav.js","components/template/SideNavToggle.js"],"sourcesContent":["import React from 'react';\r\nimport Header from 'components/template/Header';\r\nimport SidePanel from 'components/template/SidePanel';\r\nimport UserDropdown from 'components/template/UserDropdown';\r\nimport LanguageSelector from 'components/template/LanguageSelector';\r\nimport Notification from 'components/template/Notification';\r\nimport SideNavToggle from 'components/template/SideNavToggle';\r\nimport MobileNav from 'components/template/MobileNav';\r\nimport Search from 'components/template/Search';\r\nimport SideNav from 'components/template/SideNav';\r\nimport View from 'views';\r\nimport hasPermisson, { ACCESS, MODULE } from 'utils/hasPermission';\r\n\r\nconst HeaderActionsStart = () => {\r\n  return (\r\n    <>\r\n      <MobileNav />\r\n      <SideNavToggle />\r\n      {/* <Search /> */}\r\n    </>\r\n  );\r\n};\r\n\r\nconst HeaderActionsEnd = () => {\r\n  return (\r\n    <>\r\n      {/* <LanguageSelector /> */}\r\n      {hasPermisson(MODULE.NOTIFICATION, ACCESS.READ) && <Notification />}\r\n      {/* <SidePanel /> */}\r\n      <UserDropdown hoverable={false} />\r\n    </>\r\n  );\r\n};\r\n\r\nconst ModernLayout = (props) => {\r\n  return (\r\n    <div className=\"app-layout-modern flex flex-auto flex-col\">\r\n      <div className=\"flex flex-auto min-w-0\">\r\n        <SideNav />\r\n        <div className=\"flex flex-col flex-auto min-h-screen min-w-0 relative w-full bg-white dark:bg-gray-800 border-l border-gray-200 dark:border-gray-700\">\r\n          <Header\r\n            className=\"border-b border-gray-200 dark:border-gray-700\"\r\n            headerEnd={<HeaderActionsEnd />}\r\n            headerStart={<HeaderActionsStart />}\r\n          />\r\n          <View {...props} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ModernLayout;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport classNames from \"classnames\";\r\nimport { ScrollBar } from \"components/ui\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  SIDE_NAV_WIDTH,\r\n  SIDE_NAV_COLLAPSED_WIDTH,\r\n  NAV_MODE_DARK,\r\n  NAV_MODE_THEMED,\r\n  NAV_MODE_TRANSPARENT,\r\n  SIDE_NAV_CONTENT_GUTTER,\r\n  LOGO_X_GUTTER,\r\n} from \"constants/theme.constant\";\r\nimport Logo from \"components/template/Logo\";\r\nimport navigationConfig from \"configs/navigation.config\";\r\nimport VerticalMenuContent from \"components/template/VerticalMenuContent\";\r\nimport useResponsive from \"utils/hooks/useResponsive\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { APP_NAME } from \"constants/app.constant\";\r\nimport { LOGO_SRC_PATH } from \"components/template/Logo\";\r\nimport { getApi } from \"services/CommonService\";\r\nimport { APIS, LIST_DATA_API_TYPE } from \"constants/api.constant\";\r\n\r\nconst sideNavStyle = {\r\n  width: SIDE_NAV_WIDTH,\r\n  minWidth: SIDE_NAV_WIDTH,\r\n};\r\n\r\nconst sideNavCollapseStyle = {\r\n  width: SIDE_NAV_COLLAPSED_WIDTH,\r\n  minWidth: SIDE_NAV_COLLAPSED_WIDTH,\r\n};\r\n\r\nconst SideNav = () => {\r\n  const user = useSelector((state) => state.auth.user);\r\n\r\n  console.log(\"user roles\", user);\r\n  \r\n  const themeColor = useSelector((state) => state.theme.themeColor);\r\n  const primaryColorLevel = useSelector((state) => state.theme.primaryColorLevel);\r\n  const navMode = useSelector((state) => state.theme.navMode);\r\n  const mode = useSelector((state) => state.theme.mode);\r\n  const direction = useSelector((state) => state.theme.direction);\r\n  const currentRouteKey = useSelector((state) => state.base.common.currentRouteKey);\r\n  const sideNavCollapse = useSelector((state) => state.theme.layout.sideNavCollapse);\r\n  const userAuthority = useSelector((state) => state.auth.user.authority);\r\n  const { larger } = useResponsive();\r\n\r\n  const [search, setSearch] = useState('');\r\n  const [page, setPage] = useState(1);\r\n  const [limit, setLimit] = useState(50);\r\n  const [selectedHospital, setSelectedHospital] = useState(\"\");\r\n  const [hospitalList, setHospitalList] = useState([]);\r\n\r\n  const { id } = useParams();\r\n\r\n  useEffect(() => {\r\n    const savedHospitalId = localStorage.getItem(\"selectedHospitalId\");\r\n\r\n    if (user?.companyId && user?.companyId.length != 0) {\r\n      getApi(APIS.LIST_DATA, {\r\n        companyIds: JSON.stringify(user.companyId),\r\n        type: LIST_DATA_API_TYPE.COMPANY,\r\n      })\r\n        .then((res) => {\r\n          const response = res?.data?.data;\r\n\r\n          if (Array.isArray(response)) {\r\n            setHospitalList(response);\r\n\r\n            if (savedHospitalId && response.some(hospital => hospital._id === savedHospitalId)) {\r\n              setSelectedHospital(savedHospitalId);\r\n            } else if (response.length > 0) {\r\n              setSelectedHospital(response[0]._id);\r\n              localStorage.setItem(\"selectedHospitalId\", response[0]._id);\r\n            }\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          // Handle any errors from the additional API call\r\n          console.error(\"Error calling additional API:\", error);\r\n        });\r\n    }\r\n    else {\r\n      getApi(APIS.LIST_DATA, {\r\n        type: LIST_DATA_API_TYPE.COMPANY,\r\n        limit,\r\n        search,\r\n        skip: limit * (page - 1),\r\n      }).then((res) => {\r\n        const response = res?.data?.data;\r\n\r\n        if (Array.isArray(response)) {\r\n          setHospitalList(response);\r\n\r\n          if (savedHospitalId && response.some(hospital => hospital._id === savedHospitalId)) {\r\n            setSelectedHospital(savedHospitalId);\r\n          } else if (response.length > 0) {\r\n            setSelectedHospital(response[0]._id);\r\n            localStorage.setItem(\"selectedHospitalId\", response[0]._id);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }, [id, page, search, user?.companyId]);\r\n\r\n  const handleHospitalChange = (event) => {\r\n    const selectedId = event.target.value;\r\n    setSelectedHospital(selectedId);\r\n    localStorage.setItem(\"selectedHospitalId\", selectedId);\r\n    window.location.reload();\r\n  };\r\n\r\n  const sideNavColor = () => {\r\n    if (navMode === NAV_MODE_THEMED) {\r\n      return `bg-${themeColor}-${primaryColorLevel} side-nav-${navMode}`;\r\n    }\r\n    return `side-nav-${navMode}`;\r\n  };\r\n\r\n  const logoMode = () => {\r\n    if (navMode === NAV_MODE_THEMED) {\r\n      return NAV_MODE_DARK;\r\n    }\r\n    if (navMode === NAV_MODE_TRANSPARENT) {\r\n      return mode;\r\n    }\r\n    return navMode;\r\n  };\r\n\r\n  const menuContent = (\r\n    <VerticalMenuContent\r\n      navMode={navMode}\r\n      collapsed={sideNavCollapse}\r\n      navigationTree={navigationConfig}\r\n      routeKey={currentRouteKey}\r\n      userAuthority={userAuthority}\r\n      direction={direction}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {larger.md && (\r\n        <div\r\n          style={sideNavCollapse ? sideNavCollapseStyle : sideNavStyle}\r\n          className={classNames(\"side-nav\", sideNavColor(), !sideNavCollapse && \"side-nav-expand\")}\r\n        >\r\n          <div className=\"side-nav-header\">\r\n            <div className=\"flex flex-col items-center bg-blue-900 p-4\">\r\n              {!sideNavCollapse && (\r\n                <img\r\n                  className=\"my-2\"\r\n                  src={`${LOGO_SRC_PATH}Admin-logo-white.png`}\r\n                  alt={`${APP_NAME} logo`}\r\n                />\r\n              )}\r\n              {sideNavCollapse && (\r\n                <Logo\r\n                  imgClass=\"my-2\"\r\n                  mode={logoMode()}\r\n                  type={sideNavCollapse ? \"streamline\" : \"full\"}\r\n                  gutter={sideNavCollapse ? SIDE_NAV_CONTENT_GUTTER : LOGO_X_GUTTER}\r\n                  imgHeight={45}\r\n                  imgWidth={50}\r\n                />\r\n              )}\r\n\r\n              {!sideNavCollapse && (\r\n                <select\r\n                  className=\"mt-3 p-2 w-full bg-white text-black rounded-md\"\r\n                  value={selectedHospital}\r\n                  onChange={handleHospitalChange}\r\n                >\r\n                  <option value=\"\">Select Hospital</option>\r\n                  {hospitalList.map((hospital) => (\r\n                    <option key={hospital._id} value={hospital._id}>\r\n                      {hospital.name}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              )}\r\n            </div>\r\n          </div>\r\n          {sideNavCollapse ? (\r\n            menuContent\r\n          ) : (\r\n            <div className=\"side-nav-content bg-blue-900\">\r\n              <ScrollBar autoHide direction={direction}>{menuContent}</ScrollBar>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nSideNav.propTypes = {\r\n  themed: PropTypes.bool,\r\n  darkMode: PropTypes.bool,\r\n  themeColor: PropTypes.string,\r\n};\r\n\r\nSideNav.defaultProps = {\r\n  themed: false,\r\n  darkMode: false,\r\n  themeColor: \"\",\r\n};\r\n\r\nexport default SideNav;\r\n","import React from 'react'\r\nimport withHeaderItem from 'utils/hoc/withHeaderItem'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { setSideNavCollapse } from 'store/theme/themeSlice'\r\nimport useResponsive from 'utils/hooks/useResponsive'\r\nimport { NavToggle } from 'components/shared'\r\n\r\nexport const SideNavToggle = ({ className }) => {\r\n\r\n\tconst sideNavCollapse = useSelector((state) => state.theme.layout.sideNavCollapse)\r\n\tconst dispatch = useDispatch()\r\n\r\n\tconst { larger } = useResponsive()\r\n\r\n\tconst onCollapse = () => {\r\n\t\tdispatch(setSideNavCollapse(!sideNavCollapse))\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{larger.md && (\r\n\t\t\t\t<div \r\n\t\t\t\t\tclassName={className}\r\n\t\t\t\t\tonClick={onCollapse}\r\n\t\t\t\t>\r\n\t\t\t\t\t<NavToggle className=\"text-2xl\" toggled={sideNavCollapse} />\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default withHeaderItem(SideNavToggle)\r\n"],"names":["HeaderActionsStart","HeaderActionsEnd","hasPermisson","MODULE","ACCESS","hoverable","props","className","headerEnd","headerStart","sideNavStyle","width","SIDE_NAV_WIDTH","minWidth","sideNavCollapseStyle","SIDE_NAV_COLLAPSED_WIDTH","SideNav","user","useSelector","state","auth","console","log","themeColor","theme","primaryColorLevel","navMode","mode","direction","currentRouteKey","base","common","sideNavCollapse","layout","userAuthority","authority","larger","useResponsive","useState","search","page","limit","selectedHospital","setSelectedHospital","hospitalList","setHospitalList","id","useParams","useEffect","savedHospitalId","localStorage","getItem","companyId","length","getApi","APIS","companyIds","JSON","stringify","type","LIST_DATA_API_TYPE","then","res","response","data","Array","isArray","some","hospital","_id","setItem","catch","error","skip","menuContent","collapsed","navigationTree","navigationConfig","routeKey","md","style","classNames","NAV_MODE_THEMED","src","LOGO_SRC_PATH","alt","APP_NAME","imgClass","NAV_MODE_DARK","NAV_MODE_TRANSPARENT","gutter","SIDE_NAV_CONTENT_GUTTER","LOGO_X_GUTTER","imgHeight","imgWidth","value","onChange","event","selectedId","target","window","location","reload","map","name","autoHide","defaultProps","themed","darkMode","withHeaderItem","dispatch","useDispatch","onClick","setSideNavCollapse","toggled"],"sourceRoot":""}