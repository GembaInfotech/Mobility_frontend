{"version":3,"file":"static/js/3222.3fe02213.chunk.js","mappings":"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","sources":["views/masters/locations/addEdit/index.js","views/masters/locations/index.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\r\nimport { AdaptableCard } from \"components/shared\";\r\nimport {\r\n  Button,\r\n  Drawer,\r\n  Input,\r\n  FormItem,\r\n  FormContainer,\r\n  toast,\r\n  Notification,\r\n  Select,\r\n} from \"components/ui\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { postApi, getApi } from \"services/CommonService\";\r\nimport { APIS, LIST_DATA_API_TYPE } from \"constants/api.constant\";\r\nimport { AiOutlineSave, AiOutlineCloseCircle } from \"react-icons/ai\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst DrawerFooter = ({ editData, onCancel, onSave, isLoading }) => {\r\n  return (\r\n    <div className=\"text-right w-full\">\r\n      <Button\r\n        className=\"mr-2\"\r\n        onClick={onCancel}\r\n        disabled={isLoading}\r\n        icon={<AiOutlineCloseCircle />}\r\n      >\r\n        Cancel\r\n      </Button>\r\n      <Button\r\n        variant=\"solid\"\r\n        type=\"submit\"\r\n        onClick={onSave}\r\n        disabled={isLoading}\r\n        icon={<AiOutlineSave />}\r\n      >\r\n        {editData?.id ? \"Update\" : \"Save\"}\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Schema = Yup.object().shape({\r\n  name: Yup.string().required(\"Required\"),\r\n});\r\n\r\nconst initialValues = {\r\n  name: \"\",\r\n  companyId: \"\",\r\n};\r\n\r\nconst AddEditDeviceType = ({ editData, show, onClose, refreshPage }) => {\r\n  const savedHospitalId = localStorage.getItem(\"selectedHospitalId\");\r\n  // const [companyOptions, setCompanyOptionos] = useState([]);\r\n  const user = useSelector((state) => state.auth.user);\r\n  const formRef = useRef();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // useEffect(() => {\r\n  //   if (user?.companyId) {\r\n  //     getApi(APIS.LIST_DATA, {\r\n  //       companyIds: JSON.stringify(user.companyId),\r\n  //       type: LIST_DATA_API_TYPE.COMPANY,\r\n  //     })\r\n  //       .then((res) => {\r\n  //         const response = res?.data?.data;\r\n\r\n  //         if (Array.isArray(response)) {\r\n  //           const companyOptions = response.map((company) => ({\r\n  //             label: company.name,\r\n  //             value: company._id,\r\n  //           }));\r\n  //           setCompanyOptionos(companyOptions);\r\n  //         }\r\n  //       })\r\n  //       .catch((error) => {\r\n  //         // Handle any errors from the additional API call\r\n  //         console.error(\"Error calling additional API:\", error);\r\n  //       });\r\n  //   } else {\r\n  //     getApi(APIS.LIST_DATA, { type: LIST_DATA_API_TYPE.COMPANY })\r\n  //       .then((res) => {\r\n  //         if (res && res.data && Array.isArray(res.data.data)) {\r\n  //           const locations = res.data.data.map((location) => ({\r\n  //             label: location.name,\r\n  //             value: location._id,\r\n  //           }));\r\n  //           setCompanyOptionos(locations);\r\n  //         } else {\r\n  //           toast.push(<Notification type=\"error\">No Companies found!</Notification>);\r\n  //         }\r\n  //       })\r\n  //       .catch((error) => {\r\n  //         console.error(\"Error fetching Companies:\", error);\r\n  //         toast.push(<Notification type=\"error\">Failed to load Companies</Notification>);\r\n  //       });\r\n  //   }\r\n\r\n  // }, []);\r\n\r\n  const onSubmit = ({ name, id, companyId }, {setSubmitting}) => {\r\n    setLoading(true);\r\n    const payload = {\r\n      name,\r\n      modelType: LIST_DATA_API_TYPE.LOCATIONS,\r\n      companyId: savedHospitalId,\r\n    };\r\n\r\n    if (id) {\r\n      payload.id = id;\r\n    }\r\n\r\n    postApi(APIS.ADD_EDIT_DATA, payload)\r\n      .then(() => {\r\n        onClose();\r\n        refreshPage();\r\n        toast.push(\r\n          <Notification type=\"success\">Location saved!</Notification>\r\n        );\r\n      }).catch(()=>{\r\n        setSubmitting(false)\r\n      })\r\n      .finally(() => setLoading(false));\r\n  };\r\n\r\n  return (\r\n    <Drawer\r\n      isOpen={show}\r\n      onClose={onClose}\r\n      onRequestClose={onClose}\r\n      closable={false}\r\n      bodyClass=\"p-0\"\r\n      title={editData?.id ? \"Edit Location\" : \"Add Location\"}\r\n      footer={\r\n        <DrawerFooter\r\n          onCancel={onClose}\r\n          onSave={() => formRef?.current?.submitForm()}\r\n          isLoading={loading}\r\n          editData={editData}\r\n        />\r\n      }\r\n    >\r\n      <AdaptableCard>\r\n        <Formik\r\n          innerRef={formRef}\r\n          initialValues={editData ? editData : initialValues}\r\n          validationSchema={Schema}\r\n          onSubmit={onSubmit}\r\n          enableReinitialize\r\n        >\r\n          {({ errors, touched, setFieldValue, values }) => (\r\n            <Form className=\"p-5\">\r\n              <FormContainer>\r\n                {/* <FormItem\r\n                  label=\"Company\"\r\n                  invalid={errors.companyId && touched.companyId}\r\n                  errorMessage={errors.companyId}\r\n                >\r\n                  <Field name=\"companyId\">\r\n                    {({ field, form }) => (\r\n                      <Select\r\n                        {...field}\r\n                        options={companyOptions}\r\n                        placeholder=\"Select Company\"\r\n                        value={companyOptions.find(\r\n                          (option) => option.value === field.value\r\n                        )}\r\n                        onChange={(selectedOption) =>\r\n                          form.setFieldValue(\"companyId\", selectedOption.value)\r\n                        }\r\n                        onBlur={field.onBlur}\r\n                      />\r\n                    )}\r\n                  </Field>\r\n                </FormItem> */}\r\n                <FormItem\r\n                  label=\"Location\"\r\n                  invalid={errors?.name && touched?.name}\r\n                  errorMessage={errors?.name}\r\n                >\r\n                  <Field\r\n                    type=\"text\"\r\n                    autoComplete=\"off\"\r\n                    name=\"name\"\r\n                    placeholder=\"Enter Name\"\r\n                    component={Input}\r\n                  />\r\n                </FormItem>\r\n              </FormContainer>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </AdaptableCard>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport default AddEditDeviceType;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { getApi, postApi } from 'services/CommonService';\r\nimport { APIS, LIST_DATA_API_TYPE } from 'constants/api.constant';\r\nimport { AdaptableCard } from 'components/shared';\r\nimport { DataTable } from 'components/shared';\r\nimport { toast, Notification } from 'components/ui';\r\nimport { HiOutlinePlusCircle } from 'react-icons/hi';\r\nimport AddEditDeviceType from './addEdit';\r\nimport ActionColumn from 'components/custom/actionColumn';\r\nimport { AiFillDelete } from 'react-icons/ai';\r\nimport Header from 'components/custom/header';\r\nimport ConfirmationContent from 'components/custom/ConfirmationContent';\r\nimport {\r\n  TABLE_ACTION_KEYS,\r\n  CONFIRMATION_OBJ,\r\n  DELETE_TOAST,\r\n  UPDATE_TOAST,\r\n  ACTIVE_INACTIVE_STATUS_UPDATE_CONFIRM,\r\n} from 'constants/app.constant';\r\nimport ActiveInActiveCheckbox from 'components/custom/activeCheckbox';\r\nimport hasPermisson, { ACCESS, MODULE, newColumn } from 'utils/hasPermission';\r\n\r\nconst ACTION_CONSTANT = [\r\n  {\r\n    label: 'Edit',\r\n    key: TABLE_ACTION_KEYS.EDIT,\r\n    show: () => hasPermisson(MODULE.LOCATIONS, ACCESS.WRITE),\r\n  },\r\n  {\r\n    label: <AiFillDelete style={{ fontSize: '1.2rem' }} />,\r\n    key: TABLE_ACTION_KEYS.DELETE,\r\n    toolTip: 'Delete',\r\n    show: () => hasPermisson(MODULE.LOCATIONS, ACCESS.DELETE),\r\n  },\r\n];\r\n\r\nconst BUTTON_CONSTANT = hasPermisson(MODULE.LOCATIONS, ACCESS.WRITE)\r\n  ? [\r\n      {\r\n        label: 'Add Location',\r\n        key: TABLE_ACTION_KEYS.ADD,\r\n        icon: <HiOutlinePlusCircle />,\r\n      },\r\n    ]\r\n  : [];\r\n\r\nconst CONFIRMATION_CONSTANT = {\r\n  header: CONFIRMATION_OBJ.HEADER,\r\n  des: CONFIRMATION_OBJ.DELETE,\r\n  buttonLabel: 'Delete',\r\n};\r\n\r\nconst Locations = () => {\r\n  const savedHospitalId = localStorage.getItem(\"selectedHospitalId\");\r\n\r\n  const [deviceType, setDeviceType] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [page, setPage] = useState(1);\r\n  const [totalCount, setTotalCount] = useState(0);\r\n  const [limit, setLimit] = useState(10);\r\n  const [search, setSearch] = useState('');\r\n  const [drawer, setDrawer] = useState(false);\r\n  const [refresh, setRefresh] = useState(false);\r\n  const [selectedData, setSelectedData] = useState('');\r\n  const [openModal, setOpenModal] = useState(false);\r\n  const [activeConfirm, setActiveConfirm] = useState(false);\r\n  const refreshPage = () => setRefresh((prev) => !prev);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    getApi(APIS.LIST_DATA, {\r\n      type: LIST_DATA_API_TYPE.LOCATIONS,\r\n      limit,\r\n      search,\r\n      companyId:savedHospitalId,\r\n      skip: limit * (page - 1),\r\n    })\r\n      .then((res) => {\r\n        setDeviceType([]);\r\n        setDeviceType(res?.data?.data);\r\n        setTotalCount(res?.data?.count);\r\n      })\r\n      .finally(() => setLoading(false));\r\n  }, [search, page, limit, refresh]);\r\n\r\n  const onActionHandle = (e, key, row) => {\r\n    if (key === TABLE_ACTION_KEYS.EDIT) {\r\n      setSelectedData({\r\n        id: row?._id,\r\n        name: row?.name,\r\n      });\r\n      setDrawer(true);\r\n    }\r\n    if (key === TABLE_ACTION_KEYS.DELETE) {\r\n      setSelectedData({\r\n        id: row?._id,\r\n      });\r\n      setOpenModal(true);\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      Header: 'name',\r\n      accessor: 'name',\r\n    },\r\n    {\r\n      Header: 'Active',\r\n      Cell: (props) => {\r\n        return (\r\n          <ActiveInActiveCheckbox\r\n            dataObj={props}\r\n            setSelectedData={setSelectedData}\r\n            setActiveConfirm={setActiveConfirm}\r\n            setOpenModal={setOpenModal}\r\n          />\r\n        );\r\n      },\r\n    },\r\n    {\r\n      Header: 'Actions',\r\n      id: 'action',\r\n      accessor: (row) => row,\r\n      Cell: (props) => (\r\n        <ActionColumn\r\n          row={props.row.original}\r\n          onActionHandle={onActionHandle}\r\n          actionsMenu={ACTION_CONSTANT}\r\n        />\r\n      ),\r\n    }\r\n  ];\r\n\r\n  const onDrawerClose = () => {\r\n    setSelectedData('');\r\n    setDrawer(false);\r\n  };\r\n\r\n  const onHeaderButtonClick = (e, key) => {\r\n    if (key === TABLE_ACTION_KEYS.ADD) {\r\n      setDrawer(true);\r\n    }\r\n  };\r\n\r\n  const onModalClose = () => {\r\n    setSelectedData('');\r\n    setOpenModal(false);\r\n    setActiveConfirm(false);\r\n  };\r\n\r\n  const onConfirmClick = () => {\r\n    let toastMessage;\r\n    const payload = {\r\n      type: LIST_DATA_API_TYPE.LOCATIONS,\r\n      id: selectedData?.id,\r\n    }\r\n    if (activeConfirm) {\r\n      toastMessage = UPDATE_TOAST;\r\n      payload.status = +selectedData?.action;\r\n    \r\n    } else {\r\n      toastMessage = DELETE_TOAST;\r\n      payload.status = 0\r\n    }\r\n\r\n    postApi(APIS.BLOCK_DELETE_DATA, payload).then((res) => {\r\n      toast.push(<Notification type=\"success\">{toastMessage}</Notification>);\r\n      setRefresh((s) => !s);\r\n      onModalClose();\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Header\r\n        buttonMenu={BUTTON_CONSTANT}\r\n        setSearch={setSearch}\r\n        buttonClick={onHeaderButtonClick}\r\n      />\r\n      <AdaptableCard className=\"h-full\" bodyClass=\"h-full\">\r\n        <DataTable\r\n          columns={newColumn(columns, MODULE.LOCATIONS, 1)}\r\n          isCursor={false}\r\n          data={deviceType}\r\n          loading={loading}\r\n          skeletonAvatarColumns={[0]}\r\n          skeletonAvatarProps={{ width: 28, height: 28 }}\r\n          pagingData={{ pageIndex: page, pageSize: limit, total: totalCount }}\r\n          onPaginationChange={(pages) => setPage(pages)}\r\n          onSelectChange={(limits) => setLimit(limits)}\r\n        />\r\n      </AdaptableCard>\r\n      <AddEditDeviceType\r\n        show={drawer}\r\n        onClose={onDrawerClose}\r\n        refreshPage={refreshPage}\r\n        editData={selectedData}\r\n      />\r\n\r\n      <ConfirmationContent\r\n        isOpen={openModal}\r\n        onConfirmClick={onConfirmClick}\r\n        header={CONFIRMATION_CONSTANT.header}\r\n        des={activeConfirm ? ACTIVE_INACTIVE_STATUS_UPDATE_CONFIRM?.des : CONFIRMATION_CONSTANT.des}\r\n        onDialogClose={onModalClose}\r\n        isWarning={!activeConfirm && CONFIRMATION_OBJ.WARNING}\r\n        buttonLabel={\r\n          activeConfirm\r\n            ? ACTIVE_INACTIVE_STATUS_UPDATE_CONFIRM?.buttonLabel\r\n            : CONFIRMATION_CONSTANT.buttonLabel\r\n        }\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default Locations;\r\n"],"names":["DrawerFooter","editData","onCancel","onSave","isLoading","className","onClick","disabled","icon","variant","type","id","Schema","Yup","shape","name","required","initialValues","companyId","show","onClose","refreshPage","savedHospitalId","localStorage","getItem","formRef","useSelector","state","auth","user","useRef","useState","loading","setLoading","isOpen","onRequestClose","closable","bodyClass","title","footer","current","submitForm","innerRef","validationSchema","onSubmit","setSubmitting","payload","modelType","LIST_DATA_API_TYPE","postApi","APIS","then","toast","catch","finally","enableReinitialize","errors","touched","setFieldValue","values","label","invalid","errorMessage","autoComplete","placeholder","component","Input","ACTION_CONSTANT","key","TABLE_ACTION_KEYS","hasPermisson","MODULE","ACCESS","style","fontSize","toolTip","BUTTON_CONSTANT","CONFIRMATION_CONSTANT","header","CONFIRMATION_OBJ","des","buttonLabel","deviceType","setDeviceType","page","setPage","totalCount","setTotalCount","limit","setLimit","search","setSearch","drawer","setDrawer","refresh","setRefresh","selectedData","setSelectedData","openModal","setOpenModal","activeConfirm","setActiveConfirm","useEffect","getApi","skip","res","data","count","onActionHandle","e","row","_id","columns","Header","accessor","Cell","props","dataObj","original","actionsMenu","onModalClose","buttonMenu","buttonClick","newColumn","isCursor","skeletonAvatarColumns","skeletonAvatarProps","width","height","pagingData","pageIndex","pageSize","total","onPaginationChange","pages","onSelectChange","limits","prev","ConfirmationContent","onConfirmClick","toastMessage","UPDATE_TOAST","status","action","DELETE_TOAST","s","ACTIVE_INACTIVE_STATUS_UPDATE_CONFIRM","onDialogClose","isWarning"],"sourceRoot":""}