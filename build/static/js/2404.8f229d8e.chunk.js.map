{"version":3,"file":"static/js/2404.8f229d8e.chunk.js","mappings":"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","sources":["components/custom/fieldModal/index.js","views/masters/codes/addEdit/index.js","views/masters/codes/index.js"],"sourcesContent":["import React from \"react\";\r\nimport { Button, Dialog } from \"components/ui\";\r\nimport {\r\n  Upload,\r\n  InputGroup,\r\n  Input,\r\n} from \"components/ui\";\r\n\r\nconst FieldModal = ({\r\n  uploadLoading,\r\n  header,\r\n  des,\r\n  onDialogClose,\r\n  isWarning,\r\n  onConfirmClick,\r\n  isOpen,\r\n  buttonLabel,\r\n  setUploadFile,\r\n  uploadFile,\r\n}) => {\r\n  return (\r\n    <Dialog\r\n      isOpen={isOpen}\r\n      onClose={onDialogClose}\r\n      onRequestClose={onDialogClose}\r\n      contentClassName=\"pb-0 px-0 mt-36 min-w-36\"\r\n    >\r\n      <div className=\"px-5 pb-5\">\r\n        <h5 className=\"mb-4\">{header}</h5>\r\n        <p>{des}</p>\r\n        {isWarning && <p className=\"text-red-700\">{isWarning}</p>}\r\n        <InputGroup className=\"mb-4\">\r\n          <Input value={uploadFile?.[0]?.name} />\r\n          <Upload\r\n            uploadLimit={1}\r\n            showList={false}\r\n            accept={[\".xlsx, .xls, .csv\"]}\r\n            name=\"uploadFile\"\r\n            onChange={(file) => {\r\n              setUploadFile(file);\r\n            }}\r\n          ></Upload>\r\n        </InputGroup>\r\n        <div className=\"text-right mt-6\">\r\n          <Button\r\n            className=\"ltr:mr-2 rtl:ml-2\"\r\n            variant=\"plain\"\r\n            onClick={onDialogClose}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            variant=\"solid\"\r\n            onClick={onConfirmClick}\r\n            loading={uploadLoading}\r\n            disabled={!uploadFile}\r\n          >\r\n            {buttonLabel}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default FieldModal;\r\n","import React, { useRef, useState, useEffect } from \"react\";\r\nimport { AdaptableCard } from \"components/shared\";\r\nimport {\r\n  Button,\r\n  Drawer,\r\n  Input,\r\n  FormItem,\r\n  FormContainer,\r\n  toast,\r\n  Notification,\r\n  Select,\r\n} from \"components/ui\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { postApi, getApi } from \"services/CommonService\";\r\nimport { APIS, LIST_DATA_API_TYPE } from \"constants/api.constant\";\r\nimport { AiOutlineSave, AiOutlineCloseCircle } from \"react-icons/ai\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst TYPE_OPTIONS = [\r\n  { label: \"LCodes\", value: 1 },\r\n  { label: \"ICD\", value: 2 },\r\n];\r\n\r\nconst DrawerFooter = ({ editData, onCancel, onSave, isLoading }) => {\r\n  return (\r\n    <div className=\"text-right w-full\">\r\n      <Button\r\n        className=\"mr-2\"\r\n        onClick={onCancel}\r\n        disabled={isLoading}\r\n        icon={<AiOutlineCloseCircle />}\r\n      >\r\n        Cancel\r\n      </Button>\r\n      <Button\r\n        variant=\"solid\"\r\n        type=\"submit\"\r\n        onClick={onSave}\r\n        disabled={isLoading}\r\n        icon={<AiOutlineSave />}\r\n      >\r\n        {editData?.id ? \"Update\" : \"Save\"}\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst schema = Yup.object().shape({\r\n  code: Yup.string().required(\"Required\"),\r\n  type: Yup.object().required(\"Required\"),\r\n});\r\n\r\nconst initialValues = {\r\n  code: \"\",\r\n  description: \"\",\r\n  type: \"\",\r\n  companyId:\"\",\r\n};\r\n\r\nconst AddEditCodes = ({ editData, show, onClose, refreshPage }) => {\r\n   const savedHospitalId = localStorage.getItem(\"selectedHospitalId\");\r\n  //  const [companyOptions, setCompanyOptionos] = useState([]);\r\n    const user = useSelector((state) => state.auth.user);\r\n  const formRef = useRef();\r\n  const [loading, setLoading] = useState(false);\r\n  //// SUBMIT TAGS HANDLER///////\r\n  // useEffect(() => {\r\n  //     if (user?.companyId) {\r\n  //       getApi(APIS.LIST_DATA, {\r\n  //         companyIds: JSON.stringify(user.companyId),\r\n  //         type: LIST_DATA_API_TYPE.COMPANY,\r\n  //       })\r\n  //         .then((res) => {\r\n  //           const response = res?.data?.data;\r\n  \r\n  //           if (Array.isArray(response)) {\r\n  //             const companyOptions = response.map((company) => ({\r\n  //               label: company.name,\r\n  //               value: company._id,\r\n  //             }));\r\n  //             setCompanyOptionos(companyOptions);\r\n  //           }\r\n  //         })\r\n  //         .catch((error) => {\r\n  //           // Handle any errors from the additional API call\r\n  //           console.error(\"Error calling additional API:\", error);\r\n  //         });\r\n  //     } else {\r\n  //       getApi(APIS.LIST_DATA, { type: LIST_DATA_API_TYPE.COMPANY })\r\n  //         .then((res) => {\r\n  //           if (res && res.data && Array.isArray(res.data.data)) {\r\n  //             const locations = res.data.data.map((location) => ({\r\n  //               label: location.name,\r\n  //               value: location._id,\r\n  //             }));\r\n  //             setCompanyOptionos(locations);\r\n  //           } else {\r\n  //             toast.push(<Notification type=\"error\">No Companies found!</Notification>);\r\n  //           }\r\n  //         })\r\n  //         .catch((error) => {\r\n  //           console.error(\"Error fetching Companies:\", error);\r\n  //           toast.push(<Notification type=\"error\">Failed to load Companies</Notification>);\r\n  //         });\r\n  //     }\r\n  \r\n  //   }, []);\r\n\r\n  const onSubmit = ({ code, id, description, type, companyId }, {setSubmitting}) => {\r\n    setLoading(true);\r\n    let payload = {\r\n      code,\r\n      description,\r\n      type: type?.value?.toString(),\r\n      modelType: LIST_DATA_API_TYPE.CODES,\r\n      companyId:savedHospitalId\r\n    };\r\n\r\n    if (id) {\r\n      payload.id = id;\r\n    }\r\n\r\n    postApi(APIS.ADD_EDIT_DATA, payload)\r\n      .then(() => {\r\n        onClose();\r\n        refreshPage();\r\n        toast.push(<Notification type=\"success\">Code saved!</Notification>);\r\n      })\r\n      .catch(()=>{\r\n        setSubmitting(false);\r\n      })\r\n      .finally(() => setLoading(false));\r\n  };\r\n\r\n  return (\r\n    <Drawer\r\n      isOpen={show}\r\n      onClose={onClose}\r\n      onRequestClose={onClose}\r\n      closable={false}\r\n      bodyClass=\"p-0\"\r\n      title={editData?.id ? \"Edit Code\" : \"Add Code\"}\r\n      footer={\r\n        <DrawerFooter\r\n          onCancel={onClose}\r\n          onSave={() => formRef?.current?.submitForm()}\r\n          isLoading={loading}\r\n          editData={editData}\r\n        />\r\n      }\r\n    >\r\n      <AdaptableCard>\r\n        <Formik\r\n          innerRef={formRef}\r\n          initialValues={editData ? editData : initialValues}\r\n          validationSchema={schema}\r\n          onSubmit={onSubmit}\r\n          enableReinitialize\r\n        >\r\n          {({ errors, touched, setFieldValue, values }) => (\r\n            <Form className=\"p-5\">\r\n              <FormContainer>\r\n                {/* <FormItem\r\n                                    label=\"Company\"\r\n                                    invalid={errors.companyId && touched.companyId}\r\n                                    errorMessage={errors.companyId}\r\n                                  >\r\n                                    <Field name=\"companyId\">\r\n                                      {({ field, form }) => (\r\n                                        <Select\r\n                                          {...field}\r\n                                          options={companyOptions}\r\n                                          placeholder=\"Select Company\"\r\n                                          value={companyOptions.find(\r\n                                            (option) => option.value === field.value\r\n                                          )}\r\n                                          onChange={(selectedOption) =>\r\n                                            form.setFieldValue(\"companyId\", selectedOption.value)\r\n                                          }\r\n                                          onBlur={field.onBlur}\r\n                                        />\r\n                                      )}\r\n                                    </Field>\r\n                                  </FormItem> */}\r\n              <FormItem\r\n                  label=\"Type\"\r\n                  invalid={errors?.type && touched?.type}\r\n                  errorMessage={errors?.type}\r\n                >\r\n                  <Select\r\n                    autoComplete=\"off\"\r\n                    size=\"sm\"\r\n                    name=\"type\"\r\n                    className=\"mb-1 w-full\"\r\n                    placeholder=\"Select Type\"\r\n                    options={TYPE_OPTIONS}\r\n                    value={values.type}\r\n                    onChange={(selectedValue) => {\r\n                      setFieldValue(\"type\", selectedValue);\r\n                    }}\r\n                  />\r\n                </FormItem>\r\n                <FormItem\r\n                  label=\"Code\"\r\n                  invalid={errors?.code && touched?.code}\r\n                  errorMessage={errors?.code}\r\n                >\r\n                  <Field\r\n                    type=\"text\"\r\n                    autoComplete=\"off\"\r\n                    name=\"code\"\r\n                    placeholder=\"Enter Code \"\r\n                    component={Input}\r\n                  />\r\n                </FormItem>\r\n                <FormItem label=\"Description\">\r\n                  <Field\r\n                    type=\"text\"\r\n                    autoComplete=\"off\"\r\n                    name=\"description\"\r\n                    placeholder=\"Enter Description \"\r\n                    component={Input}\r\n                  />\r\n                </FormItem>\r\n               \r\n              </FormContainer>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </AdaptableCard>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport default AddEditCodes;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { getApi, postApi } from 'services/CommonService';\r\nimport { APIS, LIST_DATA_API_TYPE } from 'constants/api.constant';\r\nimport { AdaptableCard } from 'components/shared';\r\nimport { DataTable } from 'components/shared';\r\nimport { toast, Notification } from 'components/ui';\r\nimport { HiOutlinePlusCircle, HiDocumentDownload, HiOutlineUpload } from 'react-icons/hi';\r\nimport AddEditCodes from './addEdit';\r\nimport ActionColumn from 'components/custom/actionColumn';\r\nimport { AiFillDelete } from 'react-icons/ai';\r\nimport Header from 'components/custom/header';\r\nimport ConfirmationContent from 'components/custom/ConfirmationContent';\r\nimport { GrPowerReset } from 'react-icons/gr';\r\nimport appConfig from 'configs/app.config';\r\n\r\nimport {\r\n  TABLE_ACTION_KEYS,\r\n  CONFIRMATION_OBJ,\r\n  DELETE_TOAST,\r\n  UPLOAD_TOAST,\r\n  ACTIVE_INACTIVE_STATUS_UPDATE_CONFIRM,\r\n  UPDATE_TOAST,\r\n} from 'constants/app.constant';\r\nimport FieldModal from 'components/custom/fieldModal';\r\nimport ActiveInActiveCheckbox from 'components/custom/activeCheckbox';\r\nimport hasPermisson, { ACCESS, MODULE, newColumn } from 'utils/hasPermission';\r\n\r\nconst typeObjHandler = (code) => {\r\n  if (code === 1) {\r\n    return { label: 'Lcodes', value: 1 };\r\n  } else {\r\n    return { label: 'icd', value: 2 };\r\n  }\r\n};\r\n\r\nconst CODE_TYPE = [\r\n  { label: 'Lcodes', value: 1 },\r\n  { label: 'icd', value: 2 },\r\n];\r\n\r\nconst ACTION_CONSTANT = [\r\n  {\r\n    label: 'Edit',\r\n    key: TABLE_ACTION_KEYS.EDIT,\r\n    show: () => hasPermisson(MODULE.CODES, ACCESS.WRITE),\r\n  },\r\n  {\r\n    label: <AiFillDelete style={{ fontSize: '1.2rem' }} />,\r\n    key: TABLE_ACTION_KEYS.DELETE,\r\n    toolTip: 'Delete',\r\n    show: () => hasPermisson(MODULE.CODES, ACCESS.DELETE),\r\n  },\r\n];\r\n\r\nconst BUTTON_CONSTANT = [\r\n  // {\r\n  //   label: 'Download Sample File',\r\n  //   key: TABLE_ACTION_KEYS.DOWNLOAD,\r\n  //   icon: <HiDocumentDownload />,\r\n  // },\r\n  // {\r\n  //   label: 'Import File',\r\n  //   key: TABLE_ACTION_KEYS.IMPORT,\r\n  //   icon: <HiOutlineUpload />,\r\n  // },\r\n  {\r\n    label: 'Add Code',\r\n    key: TABLE_ACTION_KEYS.ADD,\r\n    icon: <HiOutlinePlusCircle />,\r\n  },\r\n];\r\nconst FILTER_CONSTANT = [\r\n  {\r\n    component: 'select',\r\n    options: CODE_TYPE,\r\n    className: 'mb-4 w-40\t',\r\n    placeholder: 'Code Type',\r\n    filterKey: 'codeType',\r\n  },\r\n  {\r\n    component: 'resetButton',\r\n    label: 'Reset',\r\n    icon: <GrPowerReset />,\r\n    className: 'mb-4',\r\n    filterKey: { codeType: '' },\r\n  },\r\n];\r\n\r\nconst CONFIRMATION_CONSTANT = {\r\n  header: CONFIRMATION_OBJ.HEADER,\r\n  des: CONFIRMATION_OBJ.DELETE,\r\n  buttonLabel: 'Delete',\r\n};\r\n\r\nconst FIELD_CONFIRMATION_CONSTANT = {\r\n  header: 'Import',\r\n  des: 'Choose File to upload',\r\n  buttonLabel: 'Upload',\r\n  buttonLabelLoading: 'Uploading',\r\n};\r\n\r\nconst Codes = () => {\r\n  const savedHospitalId = localStorage.getItem(\"selectedHospitalId\");\r\n  const [filterCompanyId,setFilterCompanyId] = useState([])\r\n  const [codes, setCodes] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [page, setPage] = useState(1);\r\n  const [totalCount, setTotalCount] = useState(0);\r\n  const [limit, setLimit] = useState(10);\r\n  const [search, setSearch] = useState('');\r\n  const [drawer, setDrawer] = useState(false);\r\n  const [refresh, setRefresh] = useState(false);\r\n  const [selectedData, setSelectedData] = useState('');\r\n  const [openModal, setOpenModal] = useState(false);\r\n  const [uploadLoading, setUploadLoading] = useState(false);\r\n  const [uploadFile, setUploadFile] = useState();\r\n  const [sampleCodeName, setSampleCodeName] = useState('');\r\n  const refreshPage = () => setRefresh((prev) => !prev);\r\n  const [filterValue, setFilterValue] = useState({\r\n    codeType: '',\r\n  });\r\n  const [activeConfirm, setActiveConfirm] = useState(false);\r\n  const [isImportModal, setIsImportModal] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    const payload = {\r\n      type: LIST_DATA_API_TYPE.CODES,\r\n      limit,\r\n      companyId: filterCompanyId?._id ?? savedHospitalId,\r\n      search,\r\n      skip: limit * (page - 1),\r\n    };\r\n    if (filterValue?.codeType !== '') {\r\n      payload.codeType = filterValue?.codeType?.value;\r\n    }\r\n\r\n    getApi(APIS.LIST_DATA, {\r\n      ...payload,\r\n    })\r\n      .then((res) => {\r\n        console.log('ressss',res);\r\n        setSampleCodeName(res?.data?.lcodeSampleFile);\r\n        setCodes([]);\r\n        setCodes(res?.data?.data);\r\n        setTotalCount(res?.data?.count);\r\n      })\r\n      .finally(() => setLoading(false));\r\n      console.log('ressssppp',Codes);\r\n  }, [search, page, limit, refresh, filterValue, filterCompanyId]);\r\n\r\n  const onActionHandle = (e, key, row) => {\r\n    if (key === TABLE_ACTION_KEYS.EDIT) {\r\n      setSelectedData({\r\n        id: row?._id,\r\n        code: row?.code,\r\n        description: row?.description,\r\n        type: typeObjHandler(row?.type),\r\n      });\r\n      setDrawer(true);\r\n    }\r\n    if (key === TABLE_ACTION_KEYS.DELETE) {\r\n      setSelectedData({\r\n        id: row?._id,\r\n      });\r\n      setOpenModal(true);\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      Header: 'Code',\r\n      accessor: 'code',\r\n    },\r\n    {\r\n      Header: 'Description',\r\n      Cell: (props) => {\r\n        const row = props?.row?.original;\r\n        return row?.description ? row?.description : '-';\r\n      },\r\n    },\r\n    {\r\n      Header: 'Type',\r\n      accessor: 'type',\r\n      Cell: (props) => {\r\n        const type = props.row.original.type;\r\n        if (type === 1) {\r\n          return 'Lcodes';\r\n        }\r\n        return 'icd';\r\n      },\r\n    },\r\n    {\r\n      Header: 'Active',\r\n      Cell: (props) => {\r\n        return (\r\n          <ActiveInActiveCheckbox\r\n            dataObj={props}\r\n            setSelectedData={setSelectedData}\r\n            setActiveConfirm={setActiveConfirm}\r\n            setOpenModal={setOpenModal}\r\n          />\r\n        );\r\n      },\r\n    },\r\n    {\r\n      Header: 'Actions',\r\n      id: 'action',\r\n      accessor: (row) => row,\r\n      Cell: (props) => (\r\n        <ActionColumn\r\n          row={props.row.original}\r\n          onActionHandle={onActionHandle}\r\n          actionsMenu={ACTION_CONSTANT}\r\n        />\r\n      ),\r\n    },\r\n  \r\n  ];\r\n\r\n  const onDrawerClose = () => {\r\n    setSelectedData('');\r\n    setDrawer(false);\r\n  };\r\n\r\n  const onHeaderButtonClick = (e, key) => {\r\n    if (key === TABLE_ACTION_KEYS.ADD) {\r\n      setDrawer(true);\r\n    }\r\n    if (key === TABLE_ACTION_KEYS.IMPORT) {\r\n      setIsImportModal(true);\r\n    }\r\n    if (key === TABLE_ACTION_KEYS.DOWNLOAD) {\r\n      const url = `${appConfig?.imageBaseUrl}${sampleCodeName}`;\r\n      const a = document.createElement('a');\r\n      a.href = url;\r\n      a.download = 'example-file.txt';\r\n      a.click();\r\n      window.URL.revokeObjectURL(url);\r\n    }\r\n  };\r\n\r\n  const onModalClose = () => {\r\n    setSelectedData('');\r\n    setOpenModal(false);\r\n    setActiveConfirm(false);\r\n  };\r\n\r\n  const onFieldModalClose = () => {\r\n    setIsImportModal(false);\r\n    setUploadFile('');\r\n  };\r\n\r\n  const onConfirmClick = () => {\r\n    let toastMessage;\r\n    const payload = {\r\n      type: LIST_DATA_API_TYPE.CODES,\r\n      id: selectedData?.id,\r\n    }\r\n    if (activeConfirm) {\r\n      toastMessage = UPDATE_TOAST;\r\n      payload.status = +selectedData?.action;\r\n    \r\n    } else {\r\n      toastMessage = DELETE_TOAST;\r\n      payload.status = 0\r\n    }\r\n\r\n    postApi(APIS.BLOCK_DELETE_DATA, payload).then((res) => {\r\n      toast.push(<Notification type=\"success\">{toastMessage}</Notification>);\r\n      setRefresh((s) => !s);\r\n      onModalClose();\r\n    });\r\n  };\r\n\r\n  const onFieldConfirmClick = () => {\r\n    setUploadLoading(true);\r\n    let payload = new FormData();\r\n    for (let i = 0; i < uploadFile?.length; i++) {\r\n      payload.append('file', uploadFile[i]);\r\n    }\r\n    postApi(APIS.IMPORT_CODE, payload).then((res) => {\r\n      setRefresh((s) => !s);\r\n      setUploadLoading(false);\r\n      toast.push(<Notification type=\"success\">{UPLOAD_TOAST}</Notification>);\r\n      onFieldModalClose();\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Header\r\n        buttonMenu={\r\n          hasPermisson(MODULE.CODES, ACCESS.WRITE)\r\n            ? BUTTON_CONSTANT\r\n            : BUTTON_CONSTANT.slice(0, BUTTON_CONSTANT.length - 1)\r\n        }\r\n        FilterMenu={FILTER_CONSTANT}\r\n        setFilterCompanyId={setFilterCompanyId}\r\n        filterCompanyId={filterCompanyId}\r\n        setSearch={setSearch}\r\n        buttonClick={onHeaderButtonClick}\r\n        setFilterValue={setFilterValue}\r\n        filterValue={filterValue}\r\n      />\r\n      <AdaptableCard className=\"h-full\" bodyClass=\"h-full\">\r\n        <DataTable\r\n          columns={newColumn(columns, MODULE.CODES, 1)}\r\n          isCursor={false}\r\n          data={codes}\r\n          loading={loading}\r\n          skeletonAvatarColumns={[0]}\r\n          skeletonAvatarProps={{ width: 28, height: 28 }}\r\n          pagingData={{ pageIndex: page, pageSize: limit, total: totalCount }}\r\n          onPaginationChange={(pages) => setPage(pages)}\r\n          onSelectChange={(limits) => setLimit(limits)}\r\n        />\r\n      </AdaptableCard>\r\n      <AddEditCodes\r\n        show={drawer}\r\n        onClose={onDrawerClose}\r\n        refreshPage={refreshPage}\r\n        editData={selectedData}\r\n      />\r\n\r\n      <ConfirmationContent\r\n        isOpen={openModal}\r\n        onConfirmClick={onConfirmClick}\r\n        header={CONFIRMATION_CONSTANT.header}\r\n        des={activeConfirm ? ACTIVE_INACTIVE_STATUS_UPDATE_CONFIRM?.des : CONFIRMATION_OBJ.DELETE}\r\n        onDialogClose={onModalClose}\r\n        isWarning={!activeConfirm && CONFIRMATION_OBJ.WARNING}\r\n        buttonLabel={\r\n          activeConfirm\r\n            ? ACTIVE_INACTIVE_STATUS_UPDATE_CONFIRM?.buttonLabel\r\n            : CONFIRMATION_CONSTANT.buttonLabel\r\n        }\r\n      />\r\n\r\n      <FieldModal\r\n        uploadLoading={uploadLoading}\r\n        setUploadFile={setUploadFile}\r\n        isOpen={isImportModal}\r\n        header={FIELD_CONFIRMATION_CONSTANT.header}\r\n        des={FIELD_CONFIRMATION_CONSTANT.des}\r\n        onDialogClose={onFieldModalClose}\r\n        onConfirmClick={onFieldConfirmClick}\r\n        buttonLabel={\r\n          uploadLoading\r\n            ? FIELD_CONFIRMATION_CONSTANT.buttonLabelLoading\r\n            : FIELD_CONFIRMATION_CONSTANT.buttonLabel\r\n        }\r\n        uploadFile={uploadFile}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default Codes;\r\n"],"names":["uploadLoading","header","des","onDialogClose","isWarning","onConfirmClick","isOpen","buttonLabel","setUploadFile","uploadFile","onClose","onRequestClose","contentClassName","className","value","name","uploadLimit","showList","accept","onChange","file","variant","onClick","loading","disabled","TYPE_OPTIONS","label","DrawerFooter","editData","onCancel","onSave","isLoading","icon","type","id","schema","Yup","shape","code","required","initialValues","description","companyId","show","refreshPage","savedHospitalId","localStorage","getItem","formRef","useSelector","state","auth","user","useRef","useState","setLoading","closable","bodyClass","title","footer","current","submitForm","innerRef","validationSchema","onSubmit","setSubmitting","payload","toString","modelType","LIST_DATA_API_TYPE","postApi","APIS","then","toast","catch","finally","enableReinitialize","errors","touched","setFieldValue","values","invalid","errorMessage","autoComplete","size","placeholder","options","selectedValue","component","Input","ACTION_CONSTANT","key","TABLE_ACTION_KEYS","hasPermisson","MODULE","ACCESS","style","fontSize","toolTip","BUTTON_CONSTANT","FILTER_CONSTANT","filterKey","codeType","CONFIRMATION_CONSTANT","CONFIRMATION_OBJ","FIELD_CONFIRMATION_CONSTANT","Codes","filterCompanyId","setFilterCompanyId","codes","setCodes","page","setPage","totalCount","setTotalCount","limit","setLimit","search","setSearch","drawer","setDrawer","refresh","setRefresh","selectedData","setSelectedData","openModal","setOpenModal","setUploadLoading","sampleCodeName","setSampleCodeName","filterValue","setFilterValue","activeConfirm","setActiveConfirm","isImportModal","setIsImportModal","useEffect","_id","skip","getApi","res","console","log","data","lcodeSampleFile","count","onActionHandle","e","row","columns","Header","accessor","Cell","props","original","dataObj","actionsMenu","onModalClose","onFieldModalClose","buttonMenu","slice","length","FilterMenu","buttonClick","url","appConfig","a","document","createElement","href","download","click","window","URL","revokeObjectURL","newColumn","isCursor","skeletonAvatarColumns","skeletonAvatarProps","width","height","pagingData","pageIndex","pageSize","total","onPaginationChange","pages","onSelectChange","limits","prev","ConfirmationContent","toastMessage","UPDATE_TOAST","status","action","DELETE_TOAST","s","ACTIVE_INACTIVE_STATUS_UPDATE_CONFIRM","FormData","i","append","UPLOAD_TOAST"],"sourceRoot":""}