{"version":3,"file":"static/js/5409.6410ccb3.chunk.js","mappings":"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","sources":["views/inventory/stockEntry/addEdit/index.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { useParams, useNavigate, useLocation } from \"react-router-dom\";\r\nimport { Button, Card, FormContainer, FormItem, Input, Select, toast, Notification } from \"components/ui\";\r\nimport { AiOutlineSave, AiOutlineCloseCircle } from \"react-icons/ai\";\r\nimport { getApi, postApi } from \"services/CommonService\";\r\nimport { APIS, LIST_DATA_API_TYPE } from \"constants/api.constant\";\r\nimport { UPDATE_TOAST, ADDED_TOAST } from \"constants/app.constant\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  code: Yup.string().required(\"L Code is required\"),\r\n  stockType: Yup.object().required(\"Stock Entry Type is required\"),\r\n  quantity: Yup.number()\r\n    .required(\"Quantity is required\")\r\n    .positive(\"Quantity must be positive\")\r\n    .integer(\"Quantity must be an integer\"),\r\n  location: Yup.string().required(\"Location is required\"),\r\n});\r\n\r\nconst initialValues = {\r\n  code: \"\",\r\n  description: \"\",\r\n  stockType: { label: \"Material Receipt\", value: 1 },\r\n  quantity: \"\",\r\n  location: \"\",\r\n  uom: \"\",\r\n  uomId: \"\",\r\n  transferLocation: \"\",\r\n  transferQuantity: \"\",\r\n  companyId: \"\",\r\n};\r\n\r\nconst AddEditStock = ({ onClose, refreshPage }) => {\r\n  const { id } = useParams();\r\n  const [loading, setLoading] = useState(false);\r\n  const [materialOptions, setMaterialOptions] = useState([]); // To store materials\r\n  const [warehouseOptions, setWarehouseOptions] = useState([]); // To store locations\r\n  const [editData, setEditData] = useState(initialValues);\r\n  const [loadingMaterialOptions, setLoadingMaterialOptions] = useState(true); // To handle loading state for materials\r\n  const [companyOptions, setCompanyOptionos] = useState([]);\r\n  const user = useSelector((state) => state.auth.user);\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const savedHospitalId = localStorage.getItem(\"selectedHospitalId\");\r\n\r\n\r\n  // Fetch data for materials and locations\r\n  useEffect(() => {\r\n    // if (user?.companyId) {\r\n    //   getApi(APIS.LIST_DATA, {\r\n    //     companyIds: JSON.stringify(user.companyId),\r\n    //     type: LIST_DATA_API_TYPE.COMPANY,\r\n    //   })\r\n    //     .then((res) => {\r\n    //       const response = res?.data?.data;\r\n\r\n    //       if (Array.isArray(response)) {\r\n    //         const companyOptions = response.map((company) => ({\r\n    //           label: company.name,\r\n    //           value: company._id,\r\n    //         }));\r\n    //         setCompanyOptionos(companyOptions);\r\n    //       }\r\n    //     })\r\n    //     .catch((error) => {\r\n    //       // Handle any errors from the additional API call\r\n    //       console.error(\"Error calling additional API:\", error);\r\n    //     });\r\n    // } else {\r\n    //   getApi(APIS.LIST_DATA, { type: LIST_DATA_API_TYPE.COMPANY })\r\n    //     .then((res) => {\r\n    //       if (res && res.data && Array.isArray(res.data.data)) {\r\n    //         const locations = res.data.data.map((location) => ({\r\n    //           label: location.name,\r\n    //           value: location._id,\r\n    //         }));\r\n    //         setCompanyOptionos(locations);\r\n    //       } else {\r\n    //         toast.push(<Notification type=\"error\">No Companies found!</Notification>);\r\n    //       }\r\n    //     })\r\n    //     .catch((error) => {\r\n    //       console.error(\"Error fetching Companies:\", error);\r\n    //       toast.push(<Notification type=\"error\">Failed to load Companies</Notification>);\r\n    //     });\r\n    // }\r\n    getApi(APIS.LIST_DATA, { type: LIST_DATA_API_TYPE.CODES, companyId: savedHospitalId, })\r\n      .then((res) => {\r\n        if (res && res.data && Array.isArray(res.data.data)) {\r\n          const filteredData = res.data.data.filter((item) => item.type === 1);\r\n          const materials = filteredData.map((item) => ({\r\n            label: item.code,\r\n            value: item._id,\r\n            description: item.description,\r\n            uom: item?.uomId?.name,\r\n            uomId: item?.uomId?._id,\r\n          }));\r\n          setMaterialOptions(materials);\r\n          setLoadingMaterialOptions(false); // Set loading to false once data is fetched\r\n        } else {\r\n          toast.push(<Notification type=\"error\">No Materials found!</Notification>);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching materials:\", error);\r\n        toast.push(<Notification type=\"error\">Failed to load Materials</Notification>);\r\n      });\r\n\r\n    // Fetch locations (Warehouses)\r\n    getApi(APIS.LIST_DATA, { type: LIST_DATA_API_TYPE.LOCATIONS, companyId: savedHospitalId, })\r\n      .then((res) => {\r\n        if (res && res.data && Array.isArray(res.data.data)) {\r\n          const locations = res.data.data.map((location) => ({\r\n            label: location.name,\r\n            value: location._id,\r\n          }));\r\n          setWarehouseOptions(locations);\r\n        } else {\r\n          toast.push(<Notification type=\"error\">No Warehouses found!</Notification>);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching warehouses:\", error);\r\n        toast.push(<Notification type=\"error\">Failed to load Warehouses</Notification>);\r\n      });\r\n\r\n    if (id) {\r\n      const data = location.state?.editData;\r\n\r\n      setEditData({\r\n        code: data?.lcodeId?._id || \"\",\r\n        description: data.lcodeId?.description || \"\",\r\n        stockType: { label: \"Material Receipt\", value: 1 },\r\n        quantity: data.quantity || \"\",\r\n        location: data.locationId?._id || \"\",\r\n        modelType: LIST_DATA_API_TYPE.STOCK_ENTRY,\r\n\r\n      });\r\n    }\r\n  }, [id, location.state?.editData]);\r\n\r\n\r\n  const onSubmit = (values, { setSubmitting }) => {\r\n    const payload = {\r\n      lcodeId: values.code,\r\n      stockType: values.stockType?.value,\r\n      quantity: values.quantity,\r\n      locationId: values.location,\r\n      uomId: values.uomId,\r\n      transferLocation: values.transferLocation, // Include transfer location\r\n      transferQuantity: values.transferQuantity, // Include transfer quantity\r\n      modelType: LIST_DATA_API_TYPE.STOCK_ENTRY,\r\n      // companyId: values.companyId,\r\n      companyId: savedHospitalId\r\n    };\r\n    if (id) {\r\n      payload.id = id;\r\n    }\r\n    postApi(APIS.ADD_EDIT_DATA, payload)\r\n      .then((res) => {\r\n        toast.push(<Notification type=\"success\">{id ? UPDATE_TOAST : ADDED_TOAST}</Notification>);\r\n        navigate(\"/app/inventory/stockEntry\");\r\n      })\r\n      .catch((err) => {\r\n        setSubmitting(false)\r\n      })\r\n      .finally(() => {\r\n        setSubmitting(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={editData}\r\n      validationSchema={validationSchema}\r\n      onSubmit={onSubmit}\r\n      enableReinitialize\r\n    >\r\n      {({ errors, touched, values, setFieldValue, isSubmitting }) => (\r\n        <Form>\r\n          <div className=\"flex mb-3 justify-between w-3/4\">\r\n            <h3>{editData.code ? \"Edit Stock\" : \"Add Stock\"}</h3>\r\n            <div className=\"flex\">\r\n              <Button size=\"sm\" className=\"ltr:mr-3 rtl:ml-3\" onClick={() => navigate(-1)} icon={<AiOutlineCloseCircle />} type=\"button\">\r\n                Cancel\r\n              </Button>\r\n              <Button size=\"sm\" variant=\"solid\" loading={isSubmitting || loading} icon={<AiOutlineSave />} type=\"submit\">\r\n                {editData.code ? \"Update\" : \"Save\"}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n          <Card className=\"mt-2.5 w-3/4\">\r\n            <FormContainer className=\"md:w-full lg:w-1/2\">\r\n              {/* <FormItem\r\n                label=\"Company\"\r\n                invalid={errors.companyId && touched.companyId}\r\n                errorMessage={errors.companyId}\r\n              >\r\n                <Field name=\"companyId\">\r\n                  {({ field, form }) => (\r\n                    <Select\r\n                      {...field}\r\n                      options={companyOptions}\r\n                      placeholder=\"Select Company\"\r\n                      value={companyOptions.find(\r\n                        (option) => option.value === field.value\r\n                      )}\r\n                      onChange={(selectedOption) =>\r\n                        form.setFieldValue(\"companyId\", selectedOption.value)\r\n                      }\r\n                      onBlur={field.onBlur}\r\n                    />\r\n                  )}\r\n                </Field>\r\n              </FormItem> */}\r\n              <FormItem label=\"Stock Entry Type\" invalid={errors.stockType && touched.stockType} errorMessage={errors.stockType}>\r\n                <Select\r\n                  name=\"stockType\"\r\n                  options={[\r\n                    { label: \"Material Receipt\", value: 1 },\r\n                    { label: \"Material Transfer\", value: 2 },\r\n                  ]}\r\n                  placeholder=\"Select Stock Type\"\r\n                  value={values.stockType}\r\n                  onChange={(selectedOption) => setFieldValue(\"stockType\", selectedOption)}\r\n                />\r\n              </FormItem>\r\n\r\n              <FormItem label=\"Location\" invalid={errors.location && touched.location} errorMessage={errors.location}>\r\n                <Select\r\n                  name=\"location\"\r\n                  options={warehouseOptions}\r\n                  placeholder=\"Select Location\"\r\n                  value={warehouseOptions.find((option) => option.value === values.location)}\r\n                  onChange={(selectedOption) => setFieldValue(\"location\", selectedOption.value)}\r\n                />\r\n              </FormItem>\r\n\r\n              <FormItem label=\"LCode\" invalid={errors.code && touched.code} errorMessage={errors.code}>\r\n                {loadingMaterialOptions ? (\r\n                  <Input size=\"sm\" value=\"Loading...\" readOnly />\r\n                ) : (\r\n                  <Select\r\n                    size=\"sm\"\r\n                    name=\"code\"\r\n                    placeholder=\"Select LCode\"\r\n                    options={materialOptions}\r\n                    value={materialOptions.find((option) => option.value === values.code) || null}\r\n                    onChange={(selectedOption) => {\r\n                      setFieldValue(\"code\", selectedOption.value);\r\n                      setFieldValue(\"description\", selectedOption.description);\r\n                      setFieldValue(\"uom\", selectedOption.uom);\r\n                      setFieldValue(\"uomId\", selectedOption.uomId);\r\n                    }}\r\n                  />\r\n                )}\r\n              </FormItem>\r\n\r\n              <FormItem label=\"Description\">\r\n                <Field as={Input} size=\"sm\" name=\"description\" value={values.description} readOnly />\r\n              </FormItem>\r\n\r\n              <FormItem label=\"Quantity\" invalid={errors.quantity && touched.quantity} errorMessage={errors.quantity}>\r\n                <Field as={Input} type=\"number\" name=\"quantity\" placeholder=\"Add Quantity\" value={values.quantity} onChange={(e) => setFieldValue(\"quantity\", e.target.value)} />\r\n              </FormItem>\r\n\r\n              {values.stockType.value === 2 && (\r\n                <>\r\n                  <FormItem\r\n                    label=\"Transfer Location\"\r\n                    invalid={errors.transferLocation && touched.transferLocation}\r\n                    errorMessage={errors.transferLocation}\r\n                  >\r\n                    <Select\r\n                      name=\"transferLocation\"\r\n                      options={warehouseOptions}\r\n                      placeholder=\"Select Transfer Location\"\r\n                      value={warehouseOptions.find((option) => option.value === values.transferLocation)}\r\n                      onChange={(selectedOption) => setFieldValue(\"transferLocation\", selectedOption.value)}\r\n                    />\r\n                  </FormItem>\r\n\r\n                  <FormItem\r\n                    label=\"Transfer Quantity\"\r\n                    invalid={errors.transferQuantity && touched.transferQuantity}\r\n                    errorMessage={errors.transferQuantity}\r\n                  >\r\n                    <Field\r\n                      as={Input}\r\n                      type=\"number\"\r\n                      name=\"transferQuantity\"\r\n                      placeholder=\"Enter Transfer Quantity\"\r\n                      value={values.transferQuantity}\r\n                      onChange={(e) => setFieldValue(\"transferQuantity\", e.target.value)}\r\n                    />\r\n                  </FormItem>\r\n                </>\r\n              )}\r\n            </FormContainer>\r\n          </Card>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default AddEditStock;\r\n"],"names":["validationSchema","Yup","shape","code","required","stockType","quantity","positive","integer","location","initialValues","description","label","value","uom","uomId","transferLocation","transferQuantity","companyId","onClose","refreshPage","id","useParams","useState","loading","materialOptions","setMaterialOptions","warehouseOptions","setWarehouseOptions","editData","setEditData","loadingMaterialOptions","setLoadingMaterialOptions","navigate","useSelector","state","auth","user","useNavigate","useLocation","savedHospitalId","localStorage","getItem","useEffect","getApi","APIS","type","LIST_DATA_API_TYPE","then","res","data","Array","isArray","materials","filter","item","map","_id","name","toast","catch","error","console","locations","lcodeId","locationId","modelType","onSubmit","values","setSubmitting","payload","postApi","UPDATE_TOAST","ADDED_TOAST","err","finally","enableReinitialize","errors","touched","setFieldValue","isSubmitting","className","size","onClick","icon","variant","invalid","errorMessage","options","placeholder","onChange","selectedOption","find","option","readOnly","as","Input","e","target"],"sourceRoot":""}