{"version":3,"file":"static/js/3656.ae47ef8c.chunk.js","mappings":"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","sources":["views/account/Settings/components/FormDesription.js","views/account/Settings/components/FormRow.js","views/account/Settings/components/Profile.js"],"sourcesContent":["import React from 'react'\r\n\r\nconst FormDesription = ({title, desc, ...rest}) => {\r\n\treturn (\r\n\t\t<div {...rest}>\r\n\t\t\t<h5>{title}</h5>\r\n\t\t\t<p>{desc}</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default FormDesription","import React from 'react'\r\nimport classNames from 'classnames'\r\nimport { FormItem } from 'components/ui'\r\n\r\nconst FormRow = props => {\r\n\r\n\tconst {\r\n\t\tlabel, \r\n\t\tchildren, \r\n\t\terrors, \r\n\t\ttouched, \r\n\t\tname, \r\n\t\tborder = true,\r\n\t\talignCenter = true\r\n\t} =props\r\n\r\n\treturn (\r\n\t\t<div className={classNames(\r\n\t\t\t'grid md:grid-cols-3 gap-4 py-8',\r\n\t\t\tborder && 'border-b border-gray-200 dark:border-gray-600',\r\n\t\t\talignCenter && 'items-center'\r\n\t\t)}>\r\n\t\t\t<div className=\"font-semibold\">{label}</div>\r\n\t\t\t<div className=\"col-span-2\">\r\n\t\t\t\t<FormItem\r\n\t\t\t\t\tclassName=\"mb-0 max-w-[700px]\"\r\n\t\t\t\t\tinvalid={errors[name] && touched[name]}\r\n\t\t\t\t\terrorMessage={errors[name]}\r\n\t\t\t\t>\r\n\t\t\t\t\t{children}\r\n\t\t\t\t</FormItem>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default FormRow","import React from \"react\";\r\nimport {\r\n  Input,\r\n  Avatar,\r\n  Upload,\r\n  Button,\r\n  Select,\r\n  Switcher,\r\n  Notification,\r\n  toast,\r\n  FormContainer,\r\n} from \"components/ui\";\r\nimport FormDesription from \"./FormDesription\";\r\nimport FormRow from \"./FormRow\";\r\nimport { Field, Form, Formik } from \"formik\";\r\nimport { components } from \"react-select\";\r\nimport {\r\n  HiOutlineUserCircle,\r\n  HiOutlineMail,\r\n  HiOutlineBriefcase,\r\n  HiOutlineUser,\r\n  HiCheck,\r\n  HiOutlineGlobeAlt,\r\n} from \"react-icons/hi\";\r\nimport * as Yup from \"yup\";\r\nimport { postApi } from \"services/CommonService\";\r\nimport { APIS } from \"constants/api.constant\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport useAuth from \"utils/hooks/useAuth\";\r\nimport { setUser } from \"store/auth/userSlice\";\r\n\r\nconst { Control } = components;\r\n\r\nconst initialValues = {\r\n  name: \"\",\r\n  email: \"\",\r\n  // title: \"\",\r\n  // avatar: \"\",\r\n  // lang: \"\",\r\n  // timeZone: \"\",\r\n  // syncData: false,\r\n};\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  name: Yup.string()\r\n    // .min(3, \"Too Short!\")\r\n    // .max(12, \"Too Long!\")\r\n    .required(\"User Name Required\"),\r\n  // email: Yup.string().email(\"Invalid email\").required(\"Email Required\"),\r\n  // title: Yup.string(),\r\n  // avatar: Yup.string(),\r\n  // lang: Yup.string(),\r\n  // timeZone: Yup.string(),\r\n  // syncData: Yup.bool(),\r\n});\r\n\r\nconst langOptions = [\r\n  { value: \"en\", label: \"English (US)\", imgPath: \"/img/countries/us.png\" },\r\n  { value: \"ch\", label: \"中文\", imgPath: \"/img/countries/cn.png\" },\r\n  { value: \"jp\", label: \"日本语\", imgPath: \"/img/countries/jp.png\" },\r\n  { value: \"fr\", label: \"French\", imgPath: \"/img/countries/fr.png\" },\r\n];\r\n\r\nconst CustomSelectOption = ({ innerProps, label, data, isSelected }) => {\r\n  return (\r\n    <div\r\n      className={`flex items-center justify-between p-2 ${\r\n        isSelected\r\n          ? \"bg-gray-100 dark:bg-gray-500\"\r\n          : \"hover:bg-gray-50 dark:hover:bg-gray-600\"\r\n      }`}\r\n      {...innerProps}\r\n    >\r\n      <div className=\"flex items-center\">\r\n        <Avatar shape=\"circle\" size={20} src={data.imgPath} />\r\n        <span className=\"ml-2 rtl:mr-2\">{label}</span>\r\n      </div>\r\n      {isSelected && <HiCheck className=\"text-emerald-500 text-xl\" />}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst CustomControl = ({ children, ...props }) => {\r\n  const selected = props.getValue()[0];\r\n  return (\r\n    <Control {...props}>\r\n      {selected && (\r\n        <Avatar\r\n          className=\"ltr:ml-4 rtl:mr-4\"\r\n          shape=\"circle\"\r\n          size={18}\r\n          src={selected.imgPath}\r\n        />\r\n      )}\r\n      {children}\r\n    </Control>\r\n  );\r\n};\r\n\r\nconst Profile = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const onSetFormFile = (form, field, file) => {\r\n    form.setFieldValue(field.name, URL.createObjectURL(file[0]));\r\n  };\r\n\r\n  const currenrUser = useSelector((state) => state?.auth?.user);\r\n\r\n  const { signOut } = useAuth();\r\n\r\n  const onFormSubmit = (values, setSubmitting) => {\r\n    postApi(APIS.ADMIN_PROFILE_UPDATE, { ...values }).then(() => {\r\n      toast.push(<Notification title={\"Profile updated\"} type=\"success\" />, {\r\n        placement: \"top-center\",\r\n      });\r\n\r\n      setSubmitting(false);\r\n      // signOut();\r\n      dispatch(setUser({ ...currenrUser, name: values?.name }));\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{ name: currenrUser?.name, email: currenrUser?.email }}\r\n      enableReinitialize\r\n      validationSchema={validationSchema}\r\n      onSubmit={(values, { setSubmitting }) => {\r\n        setSubmitting(true);\r\n        setTimeout(() => {\r\n          onFormSubmit(values, setSubmitting);\r\n        }, 1000);\r\n      }}\r\n    >\r\n      {({ values, touched, errors, isSubmitting, resetForm }) => {\r\n        const validatorProps = { touched, errors };\r\n        return (\r\n          <Form>\r\n            <FormContainer>\r\n              <FormDesription\r\n                title=\"General\"\r\n                desc=\"Basic info, like your name and address that will displayed in public\"\r\n              />\r\n              <FormRow name=\"name\" label=\"Name\" {...validatorProps}>\r\n                <Field\r\n                  type=\"text\"\r\n                  autoComplete=\"off\"\r\n                  name=\"name\"\r\n                  placeholder=\"Name\"\r\n                  component={Input}\r\n                  prefix={<HiOutlineUserCircle className=\"text-xl\" />}\r\n                />\r\n              </FormRow>\r\n              <FormRow name=\"email\" label=\"Email\" {...validatorProps}>\r\n                <Field\r\n                  type=\"email\"\r\n                  autoComplete=\"off\"\r\n                  name=\"email\"\r\n                  placeholder=\"Email\"\r\n                  component={Input}\r\n                  disabled\r\n                  prefix={<HiOutlineMail className=\"text-xl\" />}\r\n                />\r\n              </FormRow>\r\n              {/* <FormRow name=\"avatar\" label=\"Avatar\" {...validatorProps}>\r\n                <Field name=\"avatar\">\r\n                  {({ field, form }) => {\r\n                    const avatarProps = field.value ? { src: field.value } : {};\r\n                    return (\r\n                      <Upload\r\n                        className=\"cursor-pointer\"\r\n                        onChange={(files) => onSetFormFile(form, field, files)}\r\n                        onFileRemove={(files) =>\r\n                          onSetFormFile(form, field, files)\r\n                        }\r\n                        showList={false}\r\n                        uploadLimit={1}\r\n                      >\r\n                        <Avatar\r\n                          className=\"border-2 border-white dark:border-gray-800 shadow-lg\"\r\n                          size={60}\r\n                          shape=\"circle\"\r\n                          icon={<HiOutlineUser />}\r\n                          {...avatarProps}\r\n                        />\r\n                      </Upload>\r\n                    );\r\n                  }}\r\n                </Field>\r\n              </FormRow>\r\n              <FormRow\r\n                name=\"title\"\r\n                label=\"Title\"\r\n                {...validatorProps}\r\n                border={false}\r\n              >\r\n                <Field\r\n                  type=\"text\"\r\n                  autoComplete=\"off\"\r\n                  name=\"title\"\r\n                  placeholder=\"Title\"\r\n                  component={Input}\r\n                  prefix={<HiOutlineBriefcase className=\"text-xl\" />}\r\n                />\r\n              </FormRow>\r\n              <FormDesription\r\n                className=\"mt-8\"\r\n                title=\"Preferences\"\r\n                desc=\"Your personalized preference displayed in your account\"\r\n              />\r\n              <FormRow name=\"lang\" label=\"Language\" {...validatorProps}>\r\n                <Field name=\"lang\">\r\n                  {({ field, form }) => (\r\n                    <Select\r\n                      field={field}\r\n                      form={form}\r\n                      options={langOptions}\r\n                      components={{\r\n                        Option: CustomSelectOption,\r\n                        Control: CustomControl,\r\n                      }}\r\n                      value={langOptions.filter(\r\n                        (option) => option.value === values?.lang\r\n                      )}\r\n                      onChange={(option) =>\r\n                        form.setFieldValue(field.name, option.value)\r\n                      }\r\n                    />\r\n                  )}\r\n                </Field>\r\n              </FormRow>\r\n              <FormRow name=\"timeZone\" label=\"Time Zone\" {...validatorProps}>\r\n                <Field\r\n                  type=\"text\"\r\n                  readOnly\r\n                  autoComplete=\"off\"\r\n                  name=\"timeZone\"\r\n                  placeholder=\"Time Zone\"\r\n                  component={Input}\r\n                  prefix={<HiOutlineGlobeAlt className=\"text-xl\" />}\r\n                />\r\n              </FormRow>\r\n              <FormRow\r\n                name=\"syncData\"\r\n                label=\"Sync Data\"\r\n                {...validatorProps}\r\n                border={false}\r\n              >\r\n                <Field name=\"syncData\" component={Switcher} />\r\n              </FormRow> */}\r\n              <div className=\"mt-4 ltr:text-right\">\r\n                <Button\r\n                  className=\"ltr:mr-2 rtl:ml-2\"\r\n                  type=\"button\"\r\n                  onClick={resetForm}\r\n                >\r\n                  Reset\r\n                </Button>\r\n                <Button variant=\"solid\" loading={isSubmitting} type=\"submit\">\r\n                  {isSubmitting ? \"Updating\" : \"Update\"}\r\n                </Button>\r\n              </div>\r\n            </FormContainer>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n"],"names":["title","desc","rest","props","label","children","errors","touched","name","border","alignCenter","className","classNames","invalid","errorMessage","validationSchema","components","Yup","shape","required","dispatch","useDispatch","currenrUser","useSelector","state","auth","user","useAuth","signOut","initialValues","email","enableReinitialize","onSubmit","values","setSubmitting","setTimeout","postApi","APIS","then","toast","type","placement","setUser","onFormSubmit","isSubmitting","resetForm","validatorProps","autoComplete","placeholder","component","Input","prefix","disabled","onClick","variant","loading"],"sourceRoot":""}