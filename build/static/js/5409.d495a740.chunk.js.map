{"version":3,"file":"static/js/5409.d495a740.chunk.js","mappings":"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","sources":["services/CommonService.js","views/inventory/stockEntry/addEdit/index.js"],"sourcesContent":["import ApiService from \"./ApiService\"\r\nimport BaseService from \"./BaseService\";\r\n\r\nexport function getApi(endpoint, params) {\r\n  return BaseService.get(endpoint, { params }).then((res) => res?.data);\r\n}\r\n\r\nexport function postApi(endpoint, payload) {\r\n  return BaseService.post(endpoint, payload).then((res) => res?.data);\r\n}\r\n\r\nexport async function apiGetNotificationCount () {\r\n    return ApiService.fetchData({\r\n        url: '/notification/count',\r\n        method: 'get'\r\n    })\r\n}\r\n\r\nexport async function apiGetNotificationList () {\r\n    return ApiService.fetchData({\r\n        url: '/notification/list',\r\n        method: 'get'\r\n    })\r\n}\r\n\r\nexport async function apiGetSearchResult (data) {\r\n    return ApiService.fetchData({\r\n        url: '/search/query',\r\n        method: 'post',\r\n        data\r\n    })\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  FormContainer,\r\n  FormItem,\r\n  Input,\r\n  Select,\r\n  toast,\r\n  Notification,\r\n} from \"components/ui\";\r\nimport { AiOutlineSave, AiOutlineCloseCircle } from \"react-icons/ai\";\r\nimport { getApi, postApi } from \"services/CommonService\";\r\nimport { APIS, LIST_DATA_API_TYPE } from \"constants/api.constant\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\n\r\n// Validation schema\r\nconst validationSchema = Yup.object().shape({\r\n  materialNo: Yup.string().required(\"Material Code is required\"),\r\n  stockType: Yup.object().required(\"Stock Entry Type is required\"),\r\n  quantity: Yup.number()\r\n    .required(\"Quantity is required\")\r\n    .positive(\"Quantity must be positive\")\r\n    .integer(\"Quantity must be an integer\"),\r\n  sourceWareHouse: Yup.string().required(\"Source Warehouse is required\"),\r\n  targetWareHouse: Yup.string().when(\"stockType\", {\r\n    is: (val) => val.value === 2,\r\n    then: Yup.string().required(\"Target Warehouse is required\"),\r\n  }),\r\n});\r\n\r\nconst initialValues = {\r\n  materialNo: \"\",\r\n  materialName: \"\",\r\n  stockType: \"\",\r\n  quantity: \"\",\r\n  sourceWareHouse: \"\",\r\n  targetWareHouse: \"\",\r\n  availableQuantity: \"\",\r\n};\r\n\r\nconst AddEditStockes = ({ onClose, refreshPage }) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [materialOptions, setMaterialOptions] = useState([]);\r\n  const [warehouseOptions, setWarehouseOptions] = useState([]);\r\n  const [filteredWarehouseOptions, setFilteredWarehouseOptions] = useState([]);\r\n  const [availableQuantities, setAvailableQuantities] = useState({});\r\n  const [editData, setEditData] = useState(initialValues);\r\n\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  // Fetch data on mount\r\n  useEffect(() => {\r\n    if (location.state?.editData) {\r\n      setEditData(location.state.editData);\r\n    }\r\n    \r\n    // Fetch materials\r\n    getApi(APIS.LIST_DATA, { type: LIST_DATA_API_TYPE.MATERIALS })\r\n      .then((res) => {\r\n        if (res && res.data && Array.isArray(res.data.data)) {\r\n\r\n          // console.log(\"dataaaaa\", res.data);\r\n          \r\n          const materials = res.data.data.map((item) => ({\r\n            label: item.materialNo,\r\n            value: item._id,\r\n            materialName: item.material,\r\n            uom: item?.uomId?.name,\r\n            uomId:item?.uomId?._id\r\n          }));\r\n          console.log(materials)\r\n          setMaterialOptions(materials);\r\n        } else {\r\n          toast.push(\r\n            <Notification type=\"error\">No Materials found!</Notification>\r\n          );\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching materials:\", error);\r\n        toast.push(\r\n          <Notification type=\"error\">Failed to load Materials</Notification>\r\n        );\r\n      });\r\n\r\n    // Fetch warehouses\r\n    getApi(APIS.LIST_DATA, { type: LIST_DATA_API_TYPE.INVLOCATION })\r\n      .then((res) => {\r\n        if (res && res.data && Array.isArray(res.data.data)) {\r\n          const locations = res.data.data.map((location) => ({\r\n            label: location.name,\r\n            value: location._id,\r\n          }));\r\n          setWarehouseOptions(locations);\r\n          setFilteredWarehouseOptions(locations);\r\n        } else {\r\n          toast.push(\r\n            <Notification type=\"error\">No Warehouses found!</Notification>\r\n          );\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching warehouses:\", error);\r\n        toast.push(\r\n          <Notification type=\"error\">Failed to load Warehouses</Notification>\r\n        );\r\n      });\r\n  }, [location.state?.editData]);\r\n\r\n  const onSubmit = (values,{setSubmitting}) => {\r\n    setLoading(true);\r\n    const payload = {\r\n      materialId: values.materialNo,\r\n      stockType: values.stockType?.value,\r\n      quantity: values.quantity,\r\n      warehouseId: values.sourceWareHouse,\r\n      targetWareHouse: values.targetWareHouse,\r\n      uomId: values.uomId,\r\n      availableQuantity: values.availableQuantity,\r\n      modelType:LIST_DATA_API_TYPE.STOCK_ENTRY,\r\n    };\r\n\r\n    console.log(payload)\r\n\r\n    postApi(APIS.ADD_EDIT_DATA, payload)\r\n      .then(() => {\r\n        navigate(-1);\r\n        toast.push(\r\n          <Notification type=\"success\">Stock saved successfully!</Notification>\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error saving stock:\", error);\r\n        toast.push(<Notification type=\"error\" message=\"Save failed!\" />);\r\n      })\r\n      .finally(() => {\r\n        setLoading(false);\r\n        setSubmitting(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={editData}\r\n      validationSchema={validationSchema}\r\n      onSubmit={onSubmit}\r\n      enableReinitialize\r\n    >\r\n      {({ errors, touched, values, setFieldValue, isSubmitting }) => (\r\n        <Form>\r\n          <div className=\"flex mb-3 justify-between w-3/4\">\r\n            <h3>{editData.materialNo ? \"Edit Stock\" : \"Add Stock\"}</h3>\r\n            <div className=\"flex\">\r\n              <Button\r\n                size=\"sm\"\r\n                className=\"ltr:mr-3 rtl:ml-3\"\r\n                onClick={() => navigate(-1)}\r\n                icon={<AiOutlineCloseCircle />}\r\n                type=\"button\"\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                size=\"sm\"\r\n                variant=\"solid\"\r\n                loading={isSubmitting}\r\n                icon={<AiOutlineSave />}\r\n                type=\"submit\"\r\n              >\r\n                {editData.materialNo ? \"Update\" : \"Save\"}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n          <Card className=\"mt-2.5 w-3/4\">\r\n            <FormContainer className=\"md:w-full lg:w-1/2\">\r\n              {/* Stock Entry Type */}\r\n              <FormItem\r\n                label=\"Stock Entry Type\"\r\n                invalid={errors.stockType && touched.stockType}\r\n                errorMessage={errors.stockType?.label}\r\n              >\r\n                <Select\r\n                  name=\"stockType\"\r\n                  options={[\r\n                    { label: \"Material Receipt\", value: 1 },\r\n                    { label: \"Material Transfer\", value: 2 },\r\n                  ]}\r\n                  placeholder=\"Select Stock Entry Type\"\r\n                  value={values.stockType}\r\n                  onChange={(option) => {\r\n                    setFieldValue(\"stockType\", option);\r\n                    setFieldValue(\"sourceWareHouse\", \"\");\r\n                    setFieldValue(\"targetWareHouse\", \"\");\r\n                    setFieldValue(\"availableQuantity\", \"\");\r\n                  }}\r\n                />\r\n              </FormItem>\r\n\r\n              {/* Material Code */}\r\n              <FormItem\r\n                label=\"Material Code\"\r\n                invalid={errors?.materialNo && touched?.materialNo}\r\n                errorMessage={errors?.materialNo}\r\n              >\r\n                <Select\r\n                  size=\"sm\"\r\n                  name=\"materialNo\"\r\n                  placeholder=\"Select Material Code\"\r\n                  options={materialOptions}\r\n                  value={materialOptions.find(\r\n                    (option) => option.value === values.materialNo\r\n                  )}\r\n                  onChange={(selectedOption) => {\r\n\r\n                    console.log(\"selectedoption\", selectedOption);\r\n                    \r\n                    setFieldValue(\"materialNo\", selectedOption.value);\r\n                    setFieldValue(\"materialName\", selectedOption.materialName); // Set material name\r\n                    setFieldValue(\"uom\", selectedOption.uom); // Set UOM\r\n                    setFieldValue(\"uomId\", selectedOption.uomId); // Set UOM\r\n\r\n                  }}\r\n                />\r\n              </FormItem>\r\n\r\n              {/* Material Name and UOM */}\r\n              <FormItem label=\"Material Name\">\r\n                <Field\r\n                  as={Input}\r\n                  size=\"sm\"\r\n                  name=\"materialName\"\r\n                  value={values.materialName}\r\n                  readOnly\r\n                />\r\n              </FormItem>\r\n              <FormItem label=\"UOM\">\r\n                <Field\r\n                  as={Input}\r\n                  size=\"sm\"\r\n                  name=\"uom\"\r\n                  value={values.uom}\r\n                  readOnly\r\n                />\r\n              </FormItem>\r\n\r\n              {/* Quantity */}\r\n              <FormItem\r\n                label=\"Quantity\"\r\n                invalid={errors.quantity && touched.quantity}\r\n                errorMessage={errors.quantity}\r\n              >\r\n                <Field\r\n                  as={Input}\r\n                  type=\"number\"\r\n                  name=\"quantity\"\r\n                  placeholder=\"Add Quantity\"\r\n                  value={values.quantity}\r\n                />\r\n              </FormItem>\r\n\r\n              {/* Source Warehouse */}\r\n              <FormItem\r\n                label=\"Source Warehouse\"\r\n                invalid={errors.sourceWareHouse && touched.sourceWareHouse}\r\n                errorMessage={errors.sourceWareHouse}\r\n              >\r\n                <Select\r\n                  name=\"sourceWareHouse\"\r\n                  options={warehouseOptions}\r\n                  placeholder=\"Select Source Warehouse\"\r\n                  value={warehouseOptions.find(\r\n                    (option) => option.value === values.sourceWareHouse\r\n                  )}\r\n                  onChange={(option) => {\r\n                    setFieldValue(\"sourceWareHouse\", option.value);\r\n\r\n                    // Fetch available quantity based on selected warehouse\r\n                    const selectedWarehouse = warehouseOptions.find(\r\n                      (wh) => wh.value === option.value\r\n                    );\r\n                    // Replace this mock with actual API call or logic to fetch available quantity\r\n                    const quantity = availableQuantities[option.value] || \"\";\r\n\r\n                    setFieldValue(\"availableQuantity\", quantity);\r\n\r\n                    // Update target warehouse options by removing selected source warehouse\r\n                    const updatedTargetOptions = warehouseOptions.filter(\r\n                      (wh) => wh.value !== option.value\r\n                    );\r\n                    setFilteredWarehouseOptions(updatedTargetOptions);\r\n                  }}\r\n                />\r\n              </FormItem>\r\n\r\n              {/* Available Quantity */}\r\n              {values.stockType?.value === 2 && (\r\n                <>\r\n                  <FormItem label=\"Available Quantity\">\r\n                    <Field\r\n                      as={Input}\r\n                      name=\"availableQuantity\"\r\n                      value={values.availableQuantity}\r\n                      readOnly\r\n                    />\r\n                  </FormItem>\r\n\r\n                  {/* Target Warehouse */}\r\n                  <FormItem\r\n                    label=\"Target Warehouse\"\r\n                    invalid={errors.targetWareHouse && touched.targetWareHouse}\r\n                    errorMessage={errors.targetWareHouse}\r\n                  >\r\n                    <Select\r\n                      name=\"targetWareHouse\"\r\n                      options={filteredWarehouseOptions}\r\n                      placeholder=\"Select Target Warehouse\"\r\n                      value={filteredWarehouseOptions.find(\r\n                        (option) => option.value === values.targetWareHouse\r\n                      )}\r\n                      onChange={(option) => {\r\n                        setFieldValue(\"targetWareHouse\", option.value);\r\n                      }}\r\n                    />\r\n                  </FormItem>\r\n                </>\r\n              )}\r\n            </FormContainer>\r\n          </Card>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default AddEditStockes;\r\n"],"names":["getApi","endpoint","params","BaseService","then","res","data","postApi","payload","apiGetSearchResult","ApiService","url","method","validationSchema","Yup","shape","materialNo","required","stockType","quantity","positive","integer","sourceWareHouse","targetWareHouse","when","is","val","value","initialValues","materialName","availableQuantity","onClose","refreshPage","useState","setLoading","materialOptions","setMaterialOptions","warehouseOptions","setWarehouseOptions","filteredWarehouseOptions","setFilteredWarehouseOptions","availableQuantities","editData","setEditData","navigate","useNavigate","location","useLocation","useEffect","state","APIS","type","LIST_DATA_API_TYPE","Array","isArray","materials","map","item","label","_id","material","uom","uomId","name","console","log","toast","catch","error","locations","onSubmit","values","setSubmitting","materialId","warehouseId","modelType","message","finally","enableReinitialize","errors","touched","setFieldValue","isSubmitting","className","size","onClick","icon","variant","loading","invalid","errorMessage","options","placeholder","onChange","option","find","selectedOption","as","Input","readOnly","wh","updatedTargetOptions","filter"],"sourceRoot":""}