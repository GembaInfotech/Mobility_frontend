{"version":3,"file":"static/js/8501.d62b91a9.chunk.js","mappings":"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","sources":["views/company/addEdit/index.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { AdaptableCard } from 'components/shared';\r\nimport {\r\n  Button,\r\n  Input,\r\n  FormItem,\r\n  FormContainer,\r\n  toast,\r\n  Notification,\r\n  Card,\r\n  Spinner,\r\n  Switcher\r\n} from 'components/ui';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { getApi, postApi } from 'services/CommonService';\r\nimport { APIS, LIST_DATA_API_TYPE } from 'constants/api.constant';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\n\r\nconst SignupSchema = Yup.object().shape({\r\n  name: Yup.string().required('Required'),\r\n});\r\n\r\nconst initialValues = {\r\n  name: '',\r\n};\r\n\r\nconst AddEditAdmins = () => {\r\n  const formRef = useRef();\r\n  const [loading, setLoading] = useState(false);\r\n  const [editData, setEditData] = useState(null);\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const [dataDuplicate, setDataDuplicate] = useState(false);\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      getApi(APIS.LIST_DATA, {\r\n        type: LIST_DATA_API_TYPE.COMPANY,\r\n        id,\r\n      }).then((res) => {\r\n        const response = res?.data?.data;\r\n        if (response) {\r\n          setEditData(response);\r\n        }\r\n      });\r\n    }\r\n  }, [id]);\r\n\r\n  const onSubmit = ({ name }, { setSubmitting }) => {\r\n    setLoading(true);\r\n    const formData = new FormData();\r\n    formData.append('name', name);\r\n    if (id) formData.append('id', id);\r\n    formData.append('modelType', LIST_DATA_API_TYPE.COMPANY);\r\n    formData.append('DataDuplicate',dataDuplicate);\r\n\r\n    if (selectedImage) {\r\n      formData.append('image', selectedImage); // Ensure your backend expects \"image\"\r\n    }\r\n\r\n    postApi(APIS.ADD_EDIT_COMPANY, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n         \r\n      },\r\n    })\r\n      .then(() => {\r\n        navigate(-1);\r\n        toast.push(<Notification type=\"success\">Company saved!</Notification>);\r\n      })\r\n      .catch((error) => {\r\n        setSubmitting(false);\r\n        console.error('Error saving company:', error);\r\n      })\r\n      .finally(() => setLoading(false));\r\n  };\r\n\r\n  return (\r\n    <AdaptableCard>\r\n      <Formik\r\n        innerRef={formRef}\r\n        initialValues={editData || initialValues}\r\n        validationSchema={SignupSchema}\r\n        onSubmit={onSubmit}\r\n        enableReinitialize\r\n      >\r\n        {({ errors, touched, isSubmitting }) => (\r\n          <Form className=\"p-5\">\r\n            <div className=\"flex mb-3 justify-end w-3/4\">\r\n              <Button size=\"sm\" variant=\"solid\" onClick={() => navigate(-1)} type=\"button\">\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                size=\"sm\"\r\n                variant=\"solid\"\r\n                style={{ marginLeft: '5px' }}\r\n                loading={isSubmitting}\r\n                type=\"submit\"\r\n              >\r\n                {id ? 'Update' : 'Save'}\r\n              </Button>\r\n            </div>\r\n\r\n            {loading ? (\r\n              <div className=\"flex justify-center\">\r\n                <Spinner size=\"3.25rem\" />\r\n              </div>\r\n            ) : (\r\n              <Card className=\"mt-2.5 w-3/4\">\r\n                <FormContainer>\r\n                  <FormItem\r\n                    label=\"Name\"\r\n                    invalid={errors?.name && touched?.name}\r\n                    errorMessage={errors?.name}\r\n                  >\r\n                    <Field\r\n                      type=\"text\"\r\n                      autoComplete=\"off\"\r\n                      name=\"name\"\r\n                      placeholder=\"Enter name\"\r\n                      component={Input}\r\n                    />\r\n                  </FormItem>\r\n\r\n                  <FormItem label=\"Upload Image\">\r\n                    <input\r\n                      type=\"file\"\r\n                      accept=\"image/*\"\r\n                      onChange={(e) => setSelectedImage(e.target.files[0])}\r\n                    />\r\n                  </FormItem>\r\n\r\n                  {selectedImage && (\r\n                    <img\r\n                      src={URL.createObjectURL(selectedImage)}\r\n                      alt=\"Selected\"\r\n                      className=\"w-24 h-24 object-cover rounded border mt-2\"\r\n                    />\r\n                  )}\r\n                </FormContainer>\r\n                {id && <div className=\"flex\">\r\n                   <p className=\"mr-5\">Do you want to duplicate the data (Insurance, Codes, Device types)?</p>\r\n                   <Switcher checked={dataDuplicate} onChange={()=> setDataDuplicate(!dataDuplicate)}/>\r\n                </div>}\r\n              </Card>\r\n            )}\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </AdaptableCard>\r\n  );\r\n};\r\n\r\nexport default AddEditAdmins;\r\n"],"names":["SignupSchema","Yup","shape","name","required","initialValues","formRef","useRef","useState","loading","setLoading","editData","setEditData","selectedImage","setSelectedImage","dataDuplicate","setDataDuplicate","id","useParams","navigate","useNavigate","useEffect","getApi","APIS","type","LIST_DATA_API_TYPE","then","res","response","data","innerRef","validationSchema","onSubmit","setSubmitting","formData","FormData","append","postApi","headers","toast","catch","error","console","finally","enableReinitialize","errors","touched","isSubmitting","className","size","variant","onClick","style","marginLeft","label","invalid","errorMessage","autoComplete","placeholder","component","Input","accept","onChange","e","target","files","src","URL","createObjectURL","alt","checked"],"sourceRoot":""}