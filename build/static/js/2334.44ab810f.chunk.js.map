{"version":3,"file":"static/js/2334.44ab810f.chunk.js","mappings":"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","sources":["views/userManagement/patient/patientConstant.js","views/userManagement/patient/addEditPatient/mixComponent.js","views/userManagement/patient/addEditPatient/index.js"],"sourcesContent":["import { Input } from \"components/ui\";\r\n\r\n\r\nconst savedHospitalId = localStorage.getItem(\"selectedHospitalId\");\r\nconst label = savedHospitalId === \"67c3ec77851f03d96270ca85\"\r\n  ? \"NASPAC Case No.\"\r\n  : savedHospitalId === \"67c3fb8308a4d79e36ebf939\"\r\n  ? \"PPS Case No.\"\r\n  : \"Case No.\";\r\n\r\nexport const PATIENT_FIELD_CONSTANT = [\r\n  {\r\n    name: \"firstName\",\r\n    label: \"First Name\",\r\n    type: \"text\",\r\n    component: Input,\r\n    placeholder: \"Enter first name\",\r\n    isBasic: true,\r\n  },\r\n  {\r\n    name: \"lastName\",\r\n    label: \"Last Name\",\r\n    type: \"text\",\r\n    component: Input,\r\n    placeholder: \"Enter last name\",\r\n    isBasic: true,\r\n  },\r\n  {\r\n    name: \"phoneNumber\",\r\n    countryCode: \"countryCode\",\r\n    label: \"Mobile No.\",\r\n    component: \"phoneNumber\",\r\n    placeholder: \"Enter mobile no.\",\r\n  },\r\n\r\n  {\r\n    name: \"dob\",\r\n    label: \"DOB\",\r\n    component: \"datepicker\",\r\n  },\r\n  {\r\n    name: \"naspacNo\",\r\n    label: `${label}`,\r\n    type: \"text\",\r\n    component: Input,\r\n    isBasic: true,\r\n    placeholder: `${label}`,\r\n  },\r\n];\r\n\r\nexport const INSURANCE_FIELD_CONSTANT = [\r\n  {\r\n    name: \"primaryInsurance\",\r\n    apiType : \"insurance\",\r\n    label: \"Primary Insurance\",\r\n    component: \"asyncSelect\",\r\n    placeholder: \"Select primary insurance\",\r\n  },\r\n  {\r\n    name: \"primaryInsuranceNo\",\r\n    label: \"Primary Insurance No.\",\r\n    type: \"text\",\r\n    component: Input,\r\n    placeholder: \"Enter primary insurance no.\",\r\n    isBasic: true,\r\n  },\r\n  {\r\n    name: \"secondaryInsurance\",\r\n    apiType : \"insurance\",\r\n    label: \"Secondary Insurance\",\r\n    component: \"asyncSelect\",\r\n    placeholder: \"Select secondary insurance\",\r\n  },\r\n  {\r\n    name: \"secondaryInsuranceNo\",\r\n    label: \"Seconday Insurance No.\",\r\n    type: \"text\",\r\n    component: Input,\r\n    placeholder: \"Enter secondary insurance no.\",\r\n    isBasic: true,\r\n  }\r\n];\r\n\r\nexport const SERVICE_ORDER_FIELDS = [\r\n  {\r\n    name: \"deviceType\",\r\n    label: \"Type of device needed\",\r\n    component: \"asyncSelect\",\r\n    placeholder: \"Select device type\",\r\n  },\r\n  {\r\n    name: \"patientType\",\r\n    label: \"Is the patient ?\",\r\n    component: \"patientRadio\",\r\n  },\r\n  {\r\n    name: \"prescription\",\r\n    label: \"Prescription\",\r\n    component: \"upload\",\r\n  },\r\n  {\r\n    name: \"clinicalAssessment\",\r\n    label: \"Clinical Assessment\",\r\n    component: \"upload\",\r\n  },\r\n  {\r\n    name: \"remarks\",\r\n    label: \"Remarks\",\r\n    type: \"text\",\r\n    component: Input,\r\n    placeholder: \"Enter Remarks\",\r\n    textArea: true,\r\n    isBasic: true,\r\n  },\r\n];\r\n\r\nexport const FORM_GENDER_CONSANT = [\r\n  { label: \"Male\", value: 1 },\r\n  { label: \"Female\", value: 2 },\r\n  { label: \"Others\", value: 3 },\r\n];\r\n\r\nexport const IS_PATINET = [\r\n  { label: \"LTC\", value: 1 },\r\n  { label: \"Subacute\", value: 2 },\r\n];\r\n","import React from \"react\";\r\nimport {\r\n  DatePicker,\r\n  Radio,\r\n  Upload,\r\n  Select,\r\n  InputGroup,\r\n  Input,\r\n} from \"components/ui\";\r\nimport { Field } from \"formik\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/bootstrap.css\";\r\nimport { postApi, getApi } from \"services/CommonService\";\r\nimport { APIS, LIST_DATA_API_TYPE } from \"constants/api.constant\";\r\nimport debounce from \"lodash/debounce\";\r\nimport AsyncSelect from \"react-select/async\";\r\nimport { FORM_GENDER_CONSANT, IS_PATINET } from \"../patientConstant\";\r\nimport { PasswordInput } from \"components/shared\";\r\nimport { DATE_FORMAT } from \"constants/app.constant\";\r\nimport { formatAsSSN } from \"utils/hasPermission\";\r\n\r\nconst MixComponent = ({\r\n  id,\r\n  field,\r\n  setFieldValue,\r\n  values,\r\n  errors,\r\n  touched,\r\n}) => {\r\n  const savedHospitalId = localStorage.getItem(\"selectedHospitalId\");\r\n\r\n  const loadSelectOption = (inputValue, resolve) => {\r\n    if (field.name === \"state\") {\r\n      getApi(APIS.GET_CODE, { type: 4, search: inputValue }).then((result) => {\r\n        const filter = result?.data?.data.map((item) => {\r\n          let option = {\r\n            label: item?.name,\r\n            value: item?._id,\r\n          };\r\n          return option;\r\n        });\r\n        resolve(filter);\r\n      });\r\n    }\r\n    if (field.name === \"deviceType\") {\r\n      getApi(APIS.GET_CODE, { type: 2, search: inputValue }).then((result) => {\r\n        const filter = result?.data?.data.map((item) => {\r\n          let option = {\r\n            label: item?.name,\r\n            value: item?._id,\r\n          };\r\n          return option;\r\n        });\r\n        resolve(filter);\r\n      });\r\n    }\r\n    if (field.apiType === \"insurance\") {\r\n      getApi(APIS.LIST_DATA, { type: LIST_DATA_API_TYPE.INSURANCES, search: inputValue, companyId:savedHospitalId }).then((result) => {\r\n        const filter = result?.data?.data.map((item) => {\r\n          let option = {\r\n            label: item?.name,\r\n            value: item?._id,\r\n          };\r\n          return option;\r\n        });\r\n        resolve(filter);\r\n      });\r\n    }\r\n  };\r\n  const loadoptions = debounce(loadSelectOption, 300);\r\n\r\n  return (\r\n    <>\r\n      {field.component === \"datepicker\" && (\r\n        <>\r\n          <DatePicker\r\n            inputtable\r\n            selected={new Date(values?.[field.name])}\r\n            name={field.name}\r\n            inputFormat={DATE_FORMAT}\r\n            defaultValue={new Date(values?.[field.name])}\r\n            value={new Date(values?.[field.name])}\r\n            onChange={(date) => setFieldValue(field.name, date)}\r\n          />\r\n        </>\r\n      )}\r\n      {field.component === \"radio\" && (\r\n        <>\r\n          {FORM_GENDER_CONSANT.map((g, i) => {\r\n            return (\r\n              <Radio\r\n                className=\"mr-4\"\r\n                name=\"gender\"\r\n                value={g.value}\r\n                onChange={(date) => setFieldValue(field.name, date)}\r\n                checked={g.value === values?.[field.name] ? true : false}\r\n              >\r\n                {g.label}\r\n              </Radio>\r\n            );\r\n          })}\r\n        </>\r\n      )}\r\n      {field.component === \"patientRadio\" && (\r\n        <>\r\n          {IS_PATINET.map((g, i) => {\r\n            return (\r\n              <Radio\r\n                className=\"mr-4 mt-3\"\r\n                name=\"simpleRadioExample1\"\r\n                value={g.value}\r\n                onChange={(date) => setFieldValue(field.name, date)}\r\n                checked={g.value === values?.[field.name] ? true : false}\r\n              >\r\n                {g.label}\r\n              </Radio>\r\n            );\r\n          })}\r\n        </>\r\n      )}\r\n\r\n      {field.component === \"phoneNumber\" && (\r\n        <PhoneInput\r\n          inputStyle={{ width: \"369px\", padding: \"11px 14px 11px 60px\" }}\r\n          enableSearch={true}\r\n          country={\"us\"}\r\n          countryCodeEditable\r\n          value={`${values?.[field.name]}`}\r\n          onChange={(phone, country) => {\r\n            setFieldValue(field.name, phone);\r\n            setFieldValue(field.countryCode, country?.dialCode);\r\n          }}\r\n        />\r\n      )}\r\n      {field.component === \"upload\" && (\r\n        <InputGroup className=\"mb-4\">\r\n          <Input value={values[field.name]} />\r\n          <Upload\r\n            uploadLimit={1}\r\n            showList={false}\r\n            accept={[\"image/jpeg\", \"image/png\"]}\r\n            name={field.name}\r\n            onChange={(imgs) => {\r\n              let payload = new FormData();\r\n\r\n              for (let i = 0; i < imgs?.length; i++) {\r\n                payload.append(\"image\", imgs[i]);\r\n              }\r\n\r\n              postApi(APIS.UPLOAD_IMAGE, payload).then((res) => {\r\n                let files = [];\r\n\r\n                if (res?.data?.length) {\r\n                  files = [...files, ...res?.data];\r\n                } else {\r\n                  files = [...files, res?.data];\r\n                }\r\n\r\n                setFieldValue(field.name, files[0]?.original);\r\n              });\r\n            }}\r\n          />\r\n        </InputGroup>\r\n      )}\r\n      {field.component === \"asyncSelect\" && (\r\n        <>\r\n          <Field\r\n            closeMenuOnSelect={true}\r\n            component={Select}\r\n            autoComplete=\"off\"\r\n            placeholder={field.placeholder}\r\n            defaultOptions\r\n            cacheOptions\r\n            loadOptions={loadoptions}\r\n            componentAs={AsyncSelect}\r\n            name={field.name}\r\n            value={values?.[field.name]}\r\n            onChange={(event) => {\r\n              setFieldValue(field.name, event);\r\n            }}\r\n          />\r\n        </>\r\n      )}\r\n      {field.component === \"password\" && !id && (\r\n        <Field\r\n          autoComplete=\"off\"\r\n          name=\"password\"\r\n          placeholder=\"Password\"\r\n          component={PasswordInput}\r\n        />\r\n      )}\r\n      {field.component === \"ssn\" && (\r\n        <>\r\n          <Field\r\n            autoComplete=\"off\"\r\n            name=\"ssn\"\r\n            placeholder=\"SSN\"\r\n            maxlength={9}\r\n            component={Input}\r\n            onChange={(e) =>\r\n              setFieldValue(field.name, formatAsSSN(e.target.value))\r\n            }\r\n            value={values?.[field.name]}\r\n          />\r\n          {console.log(values?.[field.name])}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default MixComponent;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  FormItem,\r\n  FormContainer,\r\n  Card,\r\n  Button,\r\n  Spinner,\r\n  Notification,\r\n  toast,\r\n  Select,\r\n} from \"components/ui\";\r\nimport { Form, Field, useFormik, FormikProvider } from \"formik\";\r\nimport {\r\n  INSURANCE_FIELD_CONSTANT,\r\n  PATIENT_FIELD_CONSTANT,\r\n} from \"../patientConstant\";\r\nimport MixComponent from \"./mixComponent\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { postApi, getApi } from \"services/CommonService\";\r\nimport { APIS, LIST_DATA_API_TYPE } from \"constants/api.constant\";\r\nimport { UPDATE_TOAST, ADDED_TOAST } from \"constants/app.constant\";\r\nimport * as Yup from \"yup\";\r\nimport { useSelector } from \"react-redux\";\r\n// import ImageField from \"./imageField\";\r\nimport moment from \"moment\";\r\n\r\n\r\nconst patientSchema = Yup.object().shape({\r\n  firstName: Yup.string().required(\"Required\"),\r\n  lastName: Yup.string().required(\"Required\"),\r\n  dob: Yup.string().required(\"Required\"),\r\n  naspacNo: Yup.string().required(\"Required\"),\r\n  phoneNumber: Yup.string().required(\"Required\"),\r\n  primaryInsuranceNo: Yup.string(),\r\n  primaryInsurance: Yup.object(),\r\n  secondaryInsurance: Yup.object(),\r\n  secondaryInsuranceNo: Yup.string(),\r\n});\r\n\r\n\r\nconst initialValues = {\r\n  firstName: \"\",\r\n  lastName: \"\",\r\n  dob: moment().subtract(18, \"years\").format(),\r\n  naspacNo: \"\",\r\n  phoneNumber: \"\",\r\n  countryCode: \"+1\",\r\n  primaryInsurance: \"\",\r\n  primaryInsuranceNo: \"\",\r\n  secondaryInsurance: \"\",\r\n  secondaryInsuranceNo: \"\",\r\n};\r\n\r\nconst AddEditPatient = () => {\r\n  const savedHospitalId = localStorage.getItem(\"selectedHospitalId\");\r\n\r\n  const [companyOptions, setCompanyOptionos] = useState([]);\r\n  const user = useSelector((state) => state.auth.user);\r\n\r\n  console.log(\"companyOptionshdbfhrbf\", companyOptions);\r\n\r\n  const { id } = useParams();\r\n  const [editdata, setEditData] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    // if (user?.companyId) {\r\n    //   getApi(APIS.LIST_DATA, {\r\n    //     companyIds: JSON.stringify(user.companyId),\r\n    //     type: LIST_DATA_API_TYPE.COMPANY,\r\n    //   })\r\n    //     .then((res) => {\r\n    //       const response = res?.data?.data;\r\n          \r\n    //       if (Array.isArray(response)) {\r\n    //         const companyOptions = response.map((company) => ({\r\n    //           label: company.name,\r\n    //           value: company._id,\r\n    //         }));\r\n    //         setCompanyOptionos(companyOptions);\r\n    //       }\r\n    //     })\r\n    //     .catch((error) => {\r\n    //       // Handle any errors from the additional API call\r\n    //       console.error(\"Error calling additional API:\", error);\r\n    //     });\r\n    // } else {\r\n    //   getApi(APIS.LIST_DATA, { type: LIST_DATA_API_TYPE.COMPANY })\r\n    //     .then((res) => {\r\n    //       if (res && res.data && Array.isArray(res.data.data)) {\r\n    //         const locations = res.data.data.map((location) => ({\r\n    //           label: location.name,\r\n    //           value: location._id,\r\n    //         }));\r\n    //         setCompanyOptionos(locations);\r\n    //       } else {\r\n    //         toast.push(<Notification type=\"error\">No Companies found!</Notification>);\r\n    //       }\r\n    //     })\r\n    //     .catch((error) => {\r\n    //       console.error(\"Error fetching Companies:\", error);\r\n    //       toast.push(<Notification type=\"error\">Failed to load Companies</Notification>);\r\n    //     });\r\n    // }\r\n    if (id) {\r\n      getApi(APIS.LIST_DATA, {\r\n        type: LIST_DATA_API_TYPE.PATIENTS,\r\n        companyId:savedHospitalId,\r\n        id,\r\n      })\r\n        .then((res) => {\r\n          const data = res?.data?.data;\r\n          setEditData({\r\n            firstName: data?.firstName,\r\n            lastName: data?.lastName,\r\n            dob: data?.dob,\r\n            countryCode: data?.countryCode !== null ? data?.countryCode : \"+1\",\r\n            phoneNumber: data?.countryCode + data?.phoneNumber,\r\n            naspacNo: data?.naspacNo,\r\n            primaryInsurance: { label: data?.primaryInsurance?.name, value: data?.primaryInsurance?._id },\r\n            secondaryInsurance: { label: data?.secondaryInsurance?.name, value: data?.secondaryInsurance?._id },\r\n            primaryInsuranceNo: data?.primaryInsuranceNo,\r\n            secondaryInsuranceNo: data?.secondaryInsuranceNo,\r\n          });\r\n        })\r\n        .finally(() => {\r\n          setLoading(false);\r\n        });\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n  }, [id]);\r\n\r\n  const onSubmit = (payload, {setSubmitting}) => {\r\n    if (id) {\r\n      payload.id = id;\r\n    }\r\n\r\n    // Remove Country code from phone number\r\n    payload.phoneNumber = payload?.phoneNumber?.replace(\r\n      payload?.countryCode,\r\n      \"\"\r\n    );\r\n\r\n    //Check for Empty Phone number\r\n    if (payload.phoneNumber === \"\") {\r\n      delete payload.phoneNumber;\r\n    }\r\n\r\n    if (payload.primaryInsurance) {\r\n      payload.primaryInsurance = payload?.primaryInsurance?.value;\r\n    }\r\n    if (payload.secondaryInsurance) {\r\n      payload.secondaryInsurance = payload?.secondaryInsurance?.value;\r\n    }\r\n\r\n    if (payload.primaryInsuranceNo === '') delete payload.primaryInsuranceNo\r\n    if (payload.secondaryInsuranceNo === '') delete payload.secondaryInsuranceNo\r\n\r\n    if (payload.primaryInsurance === '') delete payload.primaryInsurance\r\n    if (payload.secondaryInsurance === '') delete payload.secondaryInsurance\r\n\r\n    ///setup the + sign with country code if it was not there\r\n    if (!payload?.countryCode?.includes(\"+\")) {\r\n      payload.countryCode = `+${payload.countryCode}`;\r\n    }\r\n    payload.companyId = savedHospitalId\r\n\r\n    postApi(APIS.ADD_EDIT_PATIENT, { ...payload }).then((res) => {\r\n      toast.push(\r\n        <Notification type=\"success\">\r\n          {id ? UPDATE_TOAST : ADDED_TOAST}\r\n        </Notification>\r\n      );\r\n      navigate(-1);\r\n    }).catch(()=>{\r\n      setSubmitting(false)\r\n    });\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues: id ? editdata : initialValues,\r\n    enableReinitialize: true,\r\n    validationSchema: patientSchema,\r\n    onSubmit: onSubmit,\r\n  });\r\n\r\n  const {\r\n    errors,\r\n    touched,\r\n    values,\r\n    handleSubmit,\r\n    getFieldProps,\r\n    setFieldValue,\r\n    isSubmitting,\r\n  } = formik;\r\n  return (\r\n    <FormikProvider value={formik}>\r\n      <Form\r\n        className=\"p-1\"\r\n        onSubmit={handleSubmit}\r\n        autoComplete=\"off\"\r\n        noValidate\r\n      >\r\n        <div className=\"flex mb-3 justify-between w-3/4\">\r\n          <h3>{id ? \"Edit Patient\" : \"Add Patient\"}</h3>\r\n          <div className=\"flex\">\r\n            <Button\r\n              size=\"sm\"\r\n              variant=\"solid\"\r\n              onClick={() => navigate(-1)}\r\n              type=\"button\"\r\n            >\r\n              Back / Cancel\r\n            </Button>\r\n            <Button\r\n              size=\"sm\"\r\n              variant=\"solid\"\r\n              style={{ marginLeft: \"5px\" }}\r\n              loading={isSubmitting}\r\n              type=\"submit\"\r\n            >\r\n              {id ? \"Update\" : \"Save\"}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          {loading && (\r\n            <div className=\"flex justify-center\">\r\n              <Spinner size=\"3.25rem\" />\r\n            </div>\r\n          )}\r\n          {!loading && (\r\n            <>\r\n              <Card className=\"mt-2.5 w-3/4 \">\r\n                <FormContainer className=\" md:w-full lg:w-1/2\">\r\n                  <h5 className=\"mb-4\">Personal Information</h5>\r\n                  {/* <ImageField {...{ touched, errors, values, setFieldValue }} /> */}\r\n                  {/* <FormItem label=\"Company\" invalid={errors.company && touched.company} errorMessage={errors.company}>\r\n                    <Select\r\n                      name=\"companyId\"\r\n                      options={companyOptions}\r\n                      placeholder=\"Select Company\"\r\n                      value={companyOptions.find((option) => option.value === values.companyId) || null}\r\n                      onChange={(selectedOption) => setFieldValue(\"companyId\", selectedOption.value)}\r\n                    />\r\n                  </FormItem> */}\r\n                  {PATIENT_FIELD_CONSTANT.map((field, index, array) => {\r\n                    return (\r\n                      <>\r\n                        {/* {field?.title && (\r\n                          <h6 className=\"my-3\">{field?.title}</h6>\r\n                        )} */}\r\n\r\n\r\n                        <FormItem\r\n                          key={index}\r\n                          label={\r\n                            field.component === \"password\" && id\r\n                              ? null\r\n                              : field?.label\r\n                          }\r\n                          className=\"ml-3 \"\r\n                          invalid={\r\n                            errors?.[field?.name] && touched?.[field?.name]\r\n                          }\r\n                          errorMessage={errors?.[field?.name]}\r\n                        >\r\n\r\n                          {field.isBasic ? (\r\n                            <Field\r\n                              textArea={field?.textArea ? true : false}\r\n                              type={field?.type}\r\n                              autoComplete=\"off\"\r\n                              name={field?.name}\r\n                              placeholder={field?.placeholder}\r\n                              component={field?.component}\r\n                            />\r\n                          ) : (\r\n                            <MixComponent\r\n                              id={id}\r\n                              errors={errors}\r\n                              field={field}\r\n                              setFieldValue={setFieldValue}\r\n                              values={values}\r\n                            />\r\n                          )}\r\n                        </FormItem>\r\n                      </>\r\n                    );\r\n                  })}\r\n\r\n                </FormContainer>\r\n              </Card>\r\n              <Card className=\"mt-4 w-3/4 \">\r\n                <FormContainer className=\" md:w-full lg:w-1/2\">\r\n                  <h5 className=\"mb-4\">Insurance Information</h5>\r\n                  {INSURANCE_FIELD_CONSTANT.map((field, index, array) => {\r\n                    return (\r\n                      <>\r\n                        {/* {field?.title && (\r\n                          <h6 className=\"my-3\">{field?.title}</h6>\r\n                        )} */}\r\n\r\n                        <FormItem\r\n                          key={index}\r\n                          label={field?.label}\r\n                          className=\"ml-3\"\r\n                          invalid={\r\n                            errors?.[field?.name] && touched?.[field?.name]\r\n                          }\r\n                          errorMessage={errors?.[field?.name]}\r\n                        >\r\n                          {field.isBasic ? (\r\n                            <Field\r\n                              textArea={field?.textArea ? true : false}\r\n                              type={field?.type}\r\n                              autoComplete=\"off\"\r\n                              name={field?.name}\r\n                              placeholder={field?.placeholder}\r\n                              component={field?.component}\r\n                            />\r\n                          ) : (\r\n                            <MixComponent\r\n                              id={id}\r\n                              errors={errors}\r\n                              field={field}\r\n                              setFieldValue={setFieldValue}\r\n                              values={values}\r\n                            />\r\n                          )}\r\n                        </FormItem>\r\n                      </>\r\n                    );\r\n                  })}\r\n                </FormContainer>\r\n              </Card>\r\n            </>\r\n          )}\r\n        </div>\r\n      </Form>\r\n    </FormikProvider>\r\n  );\r\n};\r\n\r\nexport default AddEditPatient;\r\n"],"names":["savedHospitalId","localStorage","getItem","label","PATIENT_FIELD_CONSTANT","name","type","component","Input","placeholder","isBasic","countryCode","INSURANCE_FIELD_CONSTANT","apiType","FORM_GENDER_CONSANT","value","IS_PATINET","id","field","setFieldValue","values","errors","touched","loadoptions","debounce","inputValue","resolve","getApi","APIS","search","then","result","filter","data","map","item","_id","LIST_DATA_API_TYPE","companyId","inputtable","selected","Date","inputFormat","DATE_FORMAT","defaultValue","onChange","date","g","i","className","checked","inputStyle","width","padding","enableSearch","country","countryCodeEditable","phone","dialCode","uploadLimit","showList","accept","imgs","payload","FormData","length","append","postApi","res","files","original","closeMenuOnSelect","Select","autoComplete","defaultOptions","cacheOptions","loadOptions","componentAs","AsyncSelect","event","PasswordInput","maxlength","e","formatAsSSN","target","console","log","patientSchema","Yup","shape","firstName","required","lastName","dob","naspacNo","phoneNumber","primaryInsuranceNo","primaryInsurance","secondaryInsurance","secondaryInsuranceNo","initialValues","moment","subtract","format","useState","companyOptions","useSelector","state","auth","user","useParams","editdata","setEditData","loading","setLoading","navigate","useNavigate","useEffect","finally","formik","useFormik","enableReinitialize","validationSchema","onSubmit","setSubmitting","replace","includes","toast","UPDATE_TOAST","ADDED_TOAST","catch","handleSubmit","getFieldProps","isSubmitting","noValidate","size","variant","onClick","style","marginLeft","index","array","invalid","errorMessage","textArea"],"sourceRoot":""}