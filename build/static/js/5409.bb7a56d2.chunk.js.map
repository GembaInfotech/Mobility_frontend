{"version":3,"file":"static/js/5409.bb7a56d2.chunk.js","mappings":"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","sources":["services/CommonService.js","views/inventory/stockEntry/addEdit/index.js"],"sourcesContent":["import ApiService from \"./ApiService\"\r\nimport BaseService from \"./BaseService\";\r\n\r\nexport function getApi(endpoint, params) {\r\n  return BaseService.get(endpoint, { params }).then((res) => res?.data);\r\n}\r\n\r\nexport function postApi(endpoint, payload) {    \r\n  return BaseService.post(endpoint, payload).then((res) => res?.data);\r\n}\r\n\r\nexport async function apiGetNotificationCount () {\r\n    return ApiService.fetchData({\r\n        url: '/notification/count',\r\n        method: 'get'\r\n    })\r\n}\r\n\r\nexport async function apiGetNotificationList () {\r\n    return ApiService.fetchData({\r\n        url: '/notification/list',\r\n        method: 'get'\r\n    })\r\n}\r\n\r\nexport async function apiGetSearchResult (data) {\r\n    return ApiService.fetchData({\r\n        url: '/search/query',\r\n        method: 'post',\r\n        data\r\n    })\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { useParams, useNavigate, useLocation } from \"react-router-dom\";\r\nimport { Button, Card, FormContainer, FormItem, Input, Select, toast, Notification } from \"components/ui\";\r\nimport { AiOutlineSave, AiOutlineCloseCircle } from \"react-icons/ai\";\r\nimport { getApi, postApi } from \"services/CommonService\";\r\nimport { APIS, LIST_DATA_API_TYPE } from \"constants/api.constant\";\r\nimport { UPDATE_TOAST, ADDED_TOAST } from \"constants/app.constant\";\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  code: Yup.string().required(\"L Code is required\"),\r\n  stockType: Yup.object().required(\"Stock Entry Type is required\"),\r\n  quantity: Yup.number()\r\n    .required(\"Quantity is required\")\r\n    .positive(\"Quantity must be positive\")\r\n    .integer(\"Quantity must be an integer\"),\r\n  location: Yup.string().required(\"Location is required\"),\r\n});\r\n\r\nconst initialValues = {\r\n  code: \"\",\r\n  description: \"\",\r\n  stockType: { label: \"Material Receipt\", value: 1 },\r\n  quantity: \"\",\r\n  location: \"\",\r\n  uom: \"\",\r\n  uomId: \"\",\r\n};\r\n\r\nconst AddEditStock = ({ onClose, refreshPage }) => {\r\n  const { id } = useParams();\r\n  const [loading, setLoading] = useState(false);\r\n  const [materialOptions, setMaterialOptions] = useState([]); // To store materials\r\n  const [warehouseOptions, setWarehouseOptions] = useState([]); // To store locations\r\n  const [editData, setEditData] = useState(initialValues);\r\n  const [loadingMaterialOptions, setLoadingMaterialOptions] = useState(true); // To handle loading state for materials\r\n\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  // Fetch data for materials and locations\r\n  useEffect(() => {\r\n    // Fetch LCode materials (Stock types)\r\n    getApi(APIS.LIST_DATA, { type: LIST_DATA_API_TYPE.CODES })\r\n      .then((res) => {\r\n        if (res && res.data && Array.isArray(res.data.data)) {\r\n          const filteredData = res.data.data.filter((item) => item.type === 1);\r\n          const materials = filteredData.map((item) => ({\r\n            label: item.code,\r\n            value: item._id,\r\n            description: item.description,\r\n            uom: item?.uomId?.name,\r\n            uomId: item?.uomId?._id,\r\n          }));\r\n          setMaterialOptions(materials);\r\n          setLoadingMaterialOptions(false); // Set loading to false once data is fetched\r\n        } else {\r\n          toast.push(<Notification type=\"error\">No Materials found!</Notification>);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching materials:\", error);\r\n        toast.push(<Notification type=\"error\">Failed to load Materials</Notification>);\r\n      });\r\n\r\n    // Fetch locations (Warehouses)\r\n    getApi(APIS.LIST_DATA, { type: LIST_DATA_API_TYPE.LOCATIONS })\r\n      .then((res) => {\r\n        if (res && res.data && Array.isArray(res.data.data)) {\r\n          const locations = res.data.data.map((location) => ({\r\n            label: location.name,\r\n            value: location._id,\r\n          }));\r\n          setWarehouseOptions(locations);\r\n        } else {\r\n          toast.push(<Notification type=\"error\">No Warehouses found!</Notification>);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching warehouses:\", error);\r\n        toast.push(<Notification type=\"error\">Failed to load Warehouses</Notification>);\r\n      });\r\n\r\n    if (id) {\r\n      const data = location.state?.editData;\r\n      setEditData({\r\n        code: data?.lcodeId?._id || \"\",\r\n        description: data.lcodeId?.description || \"\",\r\n        stockType: { label: \"Material Receipt\", value: 1 },\r\n        quantity: data.quantity || \"\",\r\n        location: data.locationId?._id || \"\",\r\n        modelType: LIST_DATA_API_TYPE.STOCK_ENTRY,\r\n      });\r\n    }\r\n  }, [id, location.state?.editData]);\r\n\r\n  // Submit handler\r\n  const onSubmit = (values, { setSubmitting }) => {\r\n    const payload = {\r\n      lcodeId: values.code,\r\n      stockType: values.stockType?.value,\r\n      quantity: values.quantity,\r\n      locationId: values.location,\r\n      uomId: values.uomId,\r\n      modelType: LIST_DATA_API_TYPE.STOCK_ENTRY,\r\n    };\r\n    if (id) {\r\n      payload.id = id;\r\n    }\r\n    postApi(APIS.ADD_EDIT_DATA, payload)\r\n      .then((res) => {\r\n        toast.push(<Notification type=\"success\">{id ? UPDATE_TOAST : ADDED_TOAST}</Notification>);\r\n        navigate(\"/app/inventory/stockEntry\");\r\n      })\r\n      .catch((err) => {\r\n        toast.push(<Notification type=\"error\">{err}</Notification>);\r\n      })\r\n      .finally(() => {\r\n        setSubmitting(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={editData}\r\n      validationSchema={validationSchema}\r\n      onSubmit={onSubmit}\r\n      enableReinitialize\r\n    >\r\n      {({ errors, touched, values, setFieldValue, isSubmitting }) => (\r\n        <Form>\r\n          <div className=\"flex mb-3 justify-between w-3/4\">\r\n            <h3>{editData.code ? \"Edit Stock\" : \"Add Stock\"}</h3>\r\n            <div className=\"flex\">\r\n              <Button size=\"sm\" className=\"ltr:mr-3 rtl:ml-3\" onClick={() => navigate(-1)} icon={<AiOutlineCloseCircle />} type=\"button\">\r\n                Cancel\r\n              </Button>\r\n              <Button size=\"sm\" variant=\"solid\" loading={isSubmitting || loading} icon={<AiOutlineSave />} type=\"submit\">\r\n                {editData.code ? \"Update\" : \"Save\"}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n          <Card className=\"mt-2.5 w-3/4\">\r\n            <FormContainer className=\"md:w-full lg:w-1/2\">\r\n              <FormItem label=\"Stock Entry Type\">\r\n                <Input value=\"Material Receipt\" readOnly size=\"sm\" />\r\n              </FormItem>\r\n\r\n              {/* Location Field */}\r\n              <FormItem label=\"Location\" invalid={errors.location && touched.location} errorMessage={errors.location}>\r\n                <Select\r\n                  name=\"Location\"\r\n                  options={warehouseOptions}\r\n                  placeholder=\"Select Location\"\r\n                  value={warehouseOptions.find((option) => option.value === values.location)}\r\n                  onChange={(selectedOption) => setFieldValue(\"location\", selectedOption.value)}\r\n                />\r\n              </FormItem>\r\n\r\n              {/* LCode Field */}\r\n              <FormItem label=\"LCode\" invalid={errors?.code && touched?.code} errorMessage={errors?.code}>\r\n                {loadingMaterialOptions ? (\r\n                  <Input size=\"sm\" value=\"Loading...\" readOnly />\r\n                ) : (\r\n                  <Select\r\n                    size=\"sm\"\r\n                    name=\"lcode\"\r\n                    placeholder=\"Select LCode\"\r\n                    options={materialOptions}\r\n                    value={materialOptions.find((option) => option.value === values.code) || null}\r\n                    onChange={(selectedOption) => {\r\n                      setFieldValue(\"code\", selectedOption.value);\r\n                      setFieldValue(\"description\", selectedOption.description);\r\n                      setFieldValue(\"uom\", selectedOption.uom);\r\n                      setFieldValue(\"uomId\", selectedOption.uomId);\r\n                    }}\r\n                  />\r\n                )}\r\n              </FormItem>\r\n\r\n              <FormItem label=\"Description\">\r\n                <Field as={Input} size=\"sm\" name=\"description\" value={values.description} readOnly />\r\n              </FormItem>\r\n\r\n              <FormItem label=\"Quantity\" invalid={errors.quantity && touched.quantity} errorMessage={errors.quantity}>\r\n                <Field as={Input} type=\"number\" name=\"quantity\" placeholder=\"Add Quantity\" value={values.quantity} />\r\n              </FormItem>\r\n            </FormContainer>\r\n          </Card>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default AddEditStock;\r\n"],"names":["getApi","endpoint","params","BaseService","then","res","data","postApi","payload","apiGetSearchResult","ApiService","url","method","validationSchema","Yup","shape","code","required","stockType","quantity","positive","integer","location","initialValues","description","label","value","uom","uomId","onClose","refreshPage","id","useParams","useState","loading","materialOptions","setMaterialOptions","warehouseOptions","setWarehouseOptions","editData","setEditData","loadingMaterialOptions","setLoadingMaterialOptions","navigate","useNavigate","useLocation","useEffect","APIS","type","LIST_DATA_API_TYPE","Array","isArray","materials","filter","item","map","_id","name","toast","catch","error","console","locations","state","lcodeId","locationId","modelType","onSubmit","values","setSubmitting","UPDATE_TOAST","ADDED_TOAST","err","finally","enableReinitialize","errors","touched","setFieldValue","isSubmitting","className","size","onClick","icon","variant","readOnly","invalid","errorMessage","options","placeholder","find","option","onChange","selectedOption","as","Input"],"sourceRoot":""}